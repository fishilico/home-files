#!/bin/sh
# Define useful shell functions

# mkdir && cd
mcd() {
    mkdir -p "$1" && cd "$1"
}

# cd && ls
cl() {
    cd "$1" && shift && ls "$@"
}

# Find broken symlinks
if find --help 2> /dev/null |grep -q -- -xtype ; then
    find_broken() {
        find "$@" -xtype l -print
    }
else
    find_broken() {
        find "$@" -type l ! -exec test -e {} \; -print
    }
fi

# Find empty directories
find_empty() {
    find "$@" -type d -empty -print
}

# Compute size of subdirectories and sort them
dus() {
    du -h "$@" | sort -h
}
du1s() {
    du -h --max-depth=1 "$@" | sort -h
}
du2s() {
    du -h --max-depth=2 "$@" | sort -h
}

# Read passwords. Zsh uses "?prompt" option to display a prompt and other
# shells (Bash, Ash, ...) use -p option, so use echo to be compatible.
# Dash fails with "read: Illegal option -s" as this is not POSIX-compliant.
read_pass() {
    echo >&2 -n 'Password: ' && read -s "$@" && echo ''
}

# Generate random passwords from kernel random number generator
# see also: openssl rand -base64 16
gen_pass() {
    # This consumes a lot of random bits, so uses non-blocking urandom and
    # keeps only non-so-special symbols
    tr -cd '0-9a-zA-Z!%&*+,\-./?@^_' < /dev/urandom | head -c"${1:-16}"
    echo ''
}
gen_pass_asc() {
    # Like gen_pass but keeps all ASCII characters.
    tr -cd '!#$%&()*+,\-./0-9:;<=>?@A-Z[\\]^_a-z{|}' < /dev/urandom | head -c"${1:-16}"
    echo ''
}
gen_pass_alnum() {
    # This consume few random bits, so use blocking /dev/random
    # $1 bytes produces ($1 * 4 / 3) base64-character, cut to $1 after dropping
    # non-alphanum symbols.
    head -c"${1:-16}" < /dev/random | base64 -w0 | tr -d '/+=' | head -c"${1:-16}"
    echo ''
}
show_entropy() {
    cat /proc/sys/kernel/random/entropy_avail
}

# Log tail, to have colors when ccze is available
if which ccze > /dev/null 2>&1 ; then
    ltail() {
        tail "$@" |ccze -A
    }
elif type alias > /dev/null 2>&1 ; then
    alias ltail=tail
else
    ltail() {
        tail "$@"
    }
fi

# Convert timestamps from Epoch to dates
epoch2date() {
    if [ $# -ge 1 ] ; then
        while [ $# -ge 1 ] ; do
            date "--date=@$1"
            shift
        done
    else
        echo >&2 "Usage: epoch2date TIMESTAMP [...]"
    fi
}
epoch2utc() {
    if [ $# -ge 1 ] ; then
        while [ $# -ge 1 ] ; do
            date -u "--date=@$1"
            shift
        done
    else
        echo >&2 "Usage: epoch2utc TIMESTAMP [...]"
    fi
}
# Get the number of seconds since Epoch
date_epoch() {
    date '+%s'
}
# Dump the local timezone file
tzdump() {
    if [ -L /etc/localtime ] ; then
        zdump -v $(readlink /etc/localtime)
    elif [ -r /etc/localtime ] ; then
        zdump -v /etc/localtime
    else
        zdump -v /usr/share/zoneinfo/UTC
    fi | sed 's,^/usr/share/zoneinfo/,,'
}

# Retrieve HTTPS certificate of a website
get_https_cert() {
    openssl s_client -servername "$1" -connect "$1:443" < /dev/null \
         -showcerts | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
}

# Combine postcat with less
postless() {
    local DIR OUTPUT STATUS
    if [ $# -eq 1 -a \! -e "$1" ] ; then
        # Find message by ID in Postfix spool
        for DIR in /var/spool/postfix/* /var/spool/postfix/*/* ; do
            [ -d "$DIR" ] || continue
            # Avoid the defer folder which contains text files
            [ "${DIR%/*}" != "/var/spool/postfix/defer" ] || continue
            if [ -e "$DIR/$1" ] ; then
                set "$DIR/$1"
                break
            fi
        done
    fi
    OUTPUT="$(postcat "$@")"
    STATUS=$?
    # Use less only if postcat succeded
    if [ "$STATUS" -eq 0 ] ; then
        echo "$OUTPUT" |less
    else
        echo "$OUTPUT"
        return $STATUS
    fi
}

# Highlight a pattern, if grep accept colors
if grep --help 2> /dev/null |grep -q -- --color ; then
    if [ -n "$BASH_VERSION" -o -n "$ZSH_VERSION" ] ; then
        # Modern shells support array substitution
        hl() {
            \grep -E --color=always -e '' "${@/#/-e}"
        }
    else
        # Same function, with a temporary file
        hl() {
            FILE="$(mktemp)"
            trap '/bin/rm -f "$FILE"' EXIT HUP INT QUIT TERM
            while [ $# -ge 1 ] ; do
                echo "$1" >> "$FILE"
                shift
            done
            \grep -E --color=always -e '' -f "$FILE"
            /bin/rm "$FILE"
        }
    fi
fi

# Enhance the output of "mount"
mounttable() {
    mount | LC_ALL=C sort -k3 | column -t
}

# Print args or use standard input (mainly for internal use)
print_args_or_stdin() {
    if [ $# -eq 0 -o "$1" = "-" ] ; then
        cat
    else
        while [ $# -ge 1 ] ; do
            echo "$1"
            shift
        done
    fi
}

# Reverse hex string and dump it
if which xxd > /dev/null 2>&1 ; then
    revhex() {
        print_args_or_stdin "$@" | xxd -p -r | xxd
    }
fi

# Reverse base64 and dump with "hexa" alias
if type alias > /dev/null 2>&1 ; then
    base6416() {
        print_args_or_stdin "$@" | base64 -d | hexa
    }
fi

# Convert decimal to hexadecimal and vice-versa
dechex() {
    (echo 'obase=16' ; print_args_or_stdin "$@") | bc -q | tr '[A-F]' '[a-f]'
}
hexdec() {
    (echo 'ibase=16' ; (print_args_or_stdin "$@" | tr '[a-f]' '[A-F]')) | bc -q
}

# Recursive md5sum, sha1sum, sha256sum... in directories
md5sumd() {
    find "$@" -type f -exec md5sum {} +
}
sha1sumd() {
    find "$@" -type f -exec sha1sum {} +
}
sha224sumd() {
    find "$@" -type f -exec sha224sum {} +
}
sha256sumd() {
    find "$@" -type f -exec sha256sum {} +
}
sha384sumd() {
    find "$@" -type f -exec sha384sum {} +
}
sha512sumd() {
    find "$@" -type f -exec sha512sum {} +
}

# Sort domain names by their subdomains
dnssort() {
    # Reverse dot-separated components
    sed '/\n/!G;s/\([^.]*\)\.\(.*\n\)/&\2.\1/;//D;s/\n//' | \
        sort "$@" | \
        sed '/\n/!G;s/\([^.]*\)\.\(.*\n\)/&\2.\1/;//D;s/\n//'
}

# Some X-Window functions
xwinlist() {
    xwininfo -root -tree
}
xwinpid() {
    xprop _NET_WM_PID | sed 's/.*= *//'
}

# Use webcam with mplayer
mplayer_webcam() {
    mplayer tv:// -tv driver=v4l2:device=/dev/video0:width=640:height=480
}

# Trace process executions
strace_exec() {
    strace -s 65536 -qq -e execve -e signal=none -f "$@" 2>&1 | \grep -v ' = -1 ENOENT ([^)]*)$'
}

# Find the package which provides an installed command
if [ -x /usr/bin/which ] ; then
    if [ -x /usr/bin/pacman ] ; then
        # Arch Linux
        whichpkg() {
            pacman -Q --owns $(/usr/bin/which "$@")
        }
    elif [ -x /usr/bin/dpkg ] ; then
        # Debian
        whichpkg() {
            dpkg --search $(/usr/bin/which "$@")
        }
    fi
fi
