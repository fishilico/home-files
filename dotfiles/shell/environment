#!/bin/sh
# SPDX-License-Identifier: MIT
#
# Copyright (c) 2013-2024 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Define environment variables to customize the command line interface

# Ensure that all bin and sbin folders are in PATH, if they are not symlinks
COLON_PATH=":$PATH:"
for DIR in /usr/local/bin /usr/local/sbin /bin /usr/bin /sbin /usr/sbin ; do
    if [ ! -L "$DIR" ] && [ -d "$DIR" ] && [ "${COLON_PATH%:"$DIR":*}" = "$COLON_PATH" ] ; then
        PATH="$DIR:$PATH"
    fi
done
export PATH
unset DIR

# Add Rust's cargo directory to path (without using the real user home in case of sudo)
HOME_CARGO_BIN="$HOME/.cargo/bin"
if [ -d "$HOME_CARGO_BIN" ] && [ "${COLON_PATH%:"$HOME_CARGO_BIN":*}" = "$COLON_PATH" ] ; then
    export PATH="$HOME_CARGO_BIN:$PATH"
fi
unset HOME_CARGO_BIN

# Find real home directory
# Try sudo user
if [ -z "${REAL_HOME:-}" ] && [ -n "${SUDO_USER:-}" ] ; then
    REAL_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
fi
# Use current $HOME variable
if [ -z "${REAL_HOME:-}" ] ; then
    REAL_HOME="$HOME"
fi
export REAL_HOME

# Set email address from .email file, if available
if [ -r "$REAL_HOME/.email" ] ; then
    read -r EMAIL < "$REAL_HOME/.email"
    export EMAIL
fi

# Add home in path
HOMEBIN="$REAL_HOME/bin"
if [ -d "$HOMEBIN" ] && [ "${COLON_PATH%:"$HOMEBIN":*}" = "$COLON_PATH" ] ; then
    export PATH="$HOMEBIN:$PATH"
fi
unset HOMEBIN

unset COLON_PATH

# Fix $TERM to announce 256 colors (useful for screen, tmux, vim...).
# For XFCE Terminal, this is a workaround for
# https://bugzilla.gnome.org/show_bug.cgi?id=640940
if [ "${TERM:-}" = "xterm" ] ; then
    case "${COLORTERM:-}" in
        gnome-terminal|xfce4-terminal)
            export TERM="xterm-256color"
            ;;
    esac
fi

# Python configuration
if [ -r "$REAL_HOME/.pythonrc" ] ; then
    export PYTHONSTARTUP="$REAL_HOME/.pythonrc"
fi

# Debian quilt configuration
# shellcheck disable=SC2039
if [ -r "$REAL_HOME/.quiltrc-dpkg" ] && type alias > /dev/null 2>&1 ; then
    # shellcheck disable=SC2139
    alias dquilt="quilt --quiltrc $REAL_HOME/.quiltrc-dpkg"
fi

# Prevent Erase in Line (EL) to Right (\33[K) in the colored output of grep.
# Please read grep man page for further information.
export GREP_COLORS='ne'

# Define $COLORFGBG to "dark background" when it is not defined
if [ -z "${COLORFGBG:-}" ] ; then
    export COLORFGBG='default;0'
fi

# Use neovim or Vim
if [ -x /usr/bin/nvim ] || command -v nvim > /dev/null 2>&1 ; then
    export EDITOR=nvim
elif [ -x /usr/bin/vim ] || command -v vim > /dev/null 2>&1 ; then
    export EDITOR=vim
fi

# Use less
if [ -x /usr/bin/less ] || command -v less > /dev/null 2>&1 ; then
    # Force -R = --RAW-CONTROL-CHARS to have colors in less
    export LESS='-R'
    export LESSCOLOR='yes'
    export PAGER='less -R'
    # -R = --quit-if-one-screen, -X = --no-init
    export GIT_PAGER='less -RFX'
    # Do not use .lesshst
    export LESSHISTFILE='/dev/null'
fi

# Make less more friendly for non-text input files, see lesspipe(1)
if [ -x /usr/bin/lesspipe ] || command -v lesspipe > /dev/null 2>&1 ; then
    export LESSOPEN="| /usr/bin/lesspipe %s"
    export LESSCLOSE="/usr/bin/lesspipe %s %s"
fi

# Use most to display man pages using colors
if [ -x /usr/bin/most ] || command -v most > /dev/null 2>&1 ; then
    export MANPAGER=most
fi

# Enable GCC colors (since GCC 4.8.0)
export GCC_COLORS=1

# Set man section search order in a "developer-friendly" way
export MANSECT='2:3:1:8:0:5:4:6:7:9:n:l'

# Customize the color theme of exa, a modern replacement for ls (https://the.exa.website/)
# * do not colorize the permission bits
# * colorize the extended attribute indicator in grey
# * do not colorize the size
# * colorize a user that's you and a group that you belong to in yellow (not bold)
# * colorize the date in purple
# * colorize directories in bold blue
export EXA_COLORS='ur=0:uw=0:ux=0:ue=0:gr=0:gw=0:gx=0:ge=0:tr=0:tw=0:tx=0:te=0:xa=38;5;8:sn=0:sb=0:uu=33:gu=33:da=35:di=1;34'

# Enable colors on macOS
# By default, the colors are LSCOLORS=exfxcxdxbxegedabagacad, giving the
# foreground and background colors of:
# * directory   (e x = blue foreground)
# * symbolic    (f x = magenta foreground)
# * socket      (c x = green foreground)
# * pipe        (d x = brown foreground)
# * executable  (b x = red foreground)
# * block       (e g = blue foreground on cyan background)
# * character   (e d = blue foreground on brown background)
# * executable  (a b = black foreground on red background)
# * executable  (a g = black foreground on cyan background)
# * directory   (a c = black foreground on green background)
# * directory   (a d = black foreground on brown background)
export CLICOLOR=1

# Force using GPG agent for SSH, if the agent is launched and there is not a
# SSH session already (in order to allow ssh -o ForwardAgent=yes)
if [ -z "${SSH_CLIENT:-}" ] ; then
    DIR="$(gpgconf --list-dirs agent-ssh-socket 2> /dev/null || :)"
    if [ -e "$DIR" ] ; then
        export SSH_AUTH_SOCK="$DIR"
        unset SSH_AGENT_PID
    fi
    unset DIR
fi

# Warn about dangerous environment
if [ -s /etc/ld.so.preload ] ; then
    (tput bold && tput setaf 1) 2> /dev/null
    echo >&2 'Warning: /etc/ld.so.preload is present on this system!'
    tput sgr0 2> /dev/null
fi
if [ -n "${LD_PRELOAD:-}" ] ; then
    (tput bold && tput setaf 1) 2> /dev/null
    echo >&2 'Warning: LD_PRELOAD is set!'
    tput sgr0 2> /dev/null
fi
if [ -n "${LD_LIBRARY_PATH:-}" ] ; then
    (tput bold && tput setaf 1) 2> /dev/null
    echo >&2 'Warning: LD_LIBRARY_PATH is set!'
    tput sgr0 2> /dev/null
fi
if [ -n "${LD_AUDIT:-}" ] ; then
    # LD_AUDIT is dangerous:
    # * man 7 rtld-audit : https://man7.org/linux/man-pages/man7/rtld-audit.7.html
    # * https://lwn.net/Articles/412048/
    # * https://www.spinics.net/lists/linux-api/msg37011.html
    (tput bold && tput setaf 1) 2> /dev/null
    echo >&2 'Warning: LD_AUDIT is set!'
    tput sgr0 2> /dev/null
fi

# Disable creating symlinks in VirtualBox shared folders when running Vagrant
# https://github.com/phoenhex/files/blob/master/slides/unboxing_your_virtualboxes.pdf
export VAGRANT_DISABLE_VBOXSYMLINKSCREATE=1
