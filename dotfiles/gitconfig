[user]
	name = Nicolas Iooss
	email = nicolas.iooss_git@polytechnique.org
	# Use "git config commit.gpgsign true" to automatically sign commits
	signingkey = E25E 254C 8EE4 D303 554B  F5AF EC70 1A1D A494 C5EB
[alias]
	amend = commit --amend
	st = status -bs
	ci = commit
	cim = commit -m
	ck = checkout
	br = branch
	purr = pull --rebase

	df = diff
	dc = diff --cached
	dp = !cd "${GIT_PREFIX:-.}" && git --no-pager -c color.diff=never diff
	g = grep --break --heading --line-number

	sup = !git submodule sync && git submodule update --init
	spl = "!if [ -z \"$(git status --porcelain -uno)\" ] ; then git pull ; else git stash && git pull && git stash pop ; fi"
	spr = "!if [ -z \"$(git status --porcelain -uno)\" ] ; then git purr ; else git stash && git purr && git stash pop ; fi"

	fixup = !sh -c 'git commit --fixup=$1 && git rebase -i --autosquash "$1^"' -
	last-patch = format-patch HEAD^
	undo = reset --soft HEAD^
	single-fixup = !cd "${GIT_PREFIX:-.}" && git-single-fixup

	bl = branch --all
	rl = remote --verbose
	tl = tag --list

	ls = "!git status -suno"
	ls-modified = "!git status --porcelain -uno | awk 'match($1, /M/) {print $2}'"
	ls-added = "!git status --porcelain -uno | awk 'match($1, /A/) {print $2}'"
	ls-deleted = "!git status --porcelain -uno | awk 'match($1, /D/) {print $2}'"
	ls-renamed = "!git status --porcelain -uno | awk 'match($1, /R/) {print $2}'"
	ls-copied = "!git status --porcelain -uno | awk 'match($1, /C/) {print $2}'"
	ls-updated = "!git status --porcelain -uno | awk 'match($1, /U/) {print $2}'"
	ls-staged = "!git status --porcelain -uno | grep -P '^[MA]' | awk '{ print $2 }'"
	ls-untracked = "!git status --porcelain -uall | awk '$1 == \"??\" {print $2}'"
	ign = ls-files --ignored --others --exclude-standard

	lg = log --format='%Cgreen%h %Cred%cr %Creset%s %Cblue%cn %C(cyan)(%G?)'
	logg = log --graph --color --decorate --show-signature
	lo = log --graph --decorate --pretty=oneline --abbrev-commit --max-count=20
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	peeps = !git log --pretty=format:%aN | sort | uniq -c | sort -rn
	graph = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
	whois = "!sh -c 'git log -i --pretty=\"format:%an <%ae>\" --author=\"$1\" | sort -u' -"

	# Fetch GitHub pull requests with: git pr-fetch origin 42
	# This can also be done by adding to [remote "origin"] in .git/config:
	#    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
	pr-fetch = "!sh -c 'git fetch \"$1\" \"pull/$2/head:pr/$2\"' -"

[branch]
	autosetuprebase = always
[color]
	ui = auto
[color "diff"]
	whitespace = red reverse
[color "grep"]
	filename = 5
	linenumber = 2
[core]
	abbrev = 12
	excludesfile = ~/.gitignore_global
	# Git is not power-cut-safe by default:
	# http://marc.info/?l=git&m=143489570403305&w=4
	fsyncObjectFiles = yes
[grep]
	lineNumber = true
[help]
	autocorrect = 1
[merge]
	tool = vimdiff
[pretty]
	# Use git log --pretty=fixes <commitid> to get a pretty "Fixes:" line
	fixes = Fixes: %h (\"%s\")
# Remove this option as old git (Debian Wheezy) does not know it.
# Anyway "push.default=simple" is the default for recent git (>= 2.0).
#[push]
#	default = simple
[sendemail]
	confirm = always
[tar "tar.xz"]
	command = xz -c

[url "git@github.com:"]
	pushInsteadOf = github:
	pushInsteadOf = git://github.com/
[url "git://github.com/"]
	insteadOf = github:
[url "git@gist.github.com:"]
	pushInsteadOf = gist:
	pushInsteadOf = git://gist.github.com/
[url "git://gist.github.com/"]
	insteadOf = gist:
