<?xml version="1.0" encoding="UTF-8"?>

<!-- Syntax highlighting for the under-development Mozilla Rust language -->
<!-- Source: https://github.com/rust-lang/gedit-config/blob/master/share/gtksourceview-3.0/language-specs/rust.lang -->

<language id="rust" _name="Rust" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-rust</property>
    <property name="globs">*.rs</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="char" _name="Character" map-to="def:character"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
    <style id="constant" _name="Constant" map-to="def:constant"/>
    <style id="identifier" _name="Identifier" map-to="def:identifier"/>
    <style id="number" _name="Number" map-to="def:number"/>
    <style id="scope" _name="Scope" map-to="def:preprocessor"/>
    <style id="attribute" _name="Attribute" map-to="def:preprocessor"/>
    <style id="macro" _name="Macro" map-to="def:preprocessor"/>
  </styles>

  <definitions>

    <context id="function" style-ref="keyword">
		<keyword>fn</keyword>
    </context>

    <context id="type" style-ref="keyword">
		<keyword>type</keyword>
    </context>

    <context id="keywords" style-ref="keyword">
		<keyword>as</keyword>
		<keyword>assert</keyword>
		<keyword>break</keyword>
		<keyword>box</keyword>
		<keyword>const</keyword>
		<keyword>continue</keyword>
		<keyword>crate</keyword>
		<keyword>do</keyword>
		<keyword>drop</keyword>
		<keyword>else</keyword>
		<keyword>enum</keyword>
		<keyword>export</keyword>
		<keyword>extern</keyword>
		<keyword>fail</keyword>
		<keyword>for</keyword>
		<keyword>if</keyword>
		<keyword>impl</keyword>
		<keyword>in</keyword>
		<keyword>let</keyword>
		<keyword>log</keyword>
		<keyword>loop</keyword>
		<keyword>match</keyword>
		<keyword>mod</keyword>
		<keyword>move</keyword>
		<keyword>mut</keyword>
		<keyword>priv</keyword>
		<keyword>pub</keyword>
		<keyword>pure</keyword>
		<keyword>ref</keyword>
		<keyword>return</keyword>
		<keyword>static</keyword>
		<keyword>struct</keyword>
		<keyword>trait</keyword>
		<keyword>unsafe</keyword>
		<keyword>use</keyword>
		<keyword>virtual</keyword>
		<keyword>where</keyword>
		<keyword>while</keyword>
    </context>

    <context id="types" style-ref="type">
		<keyword>bool</keyword>
		<keyword>int</keyword>
		<keyword>isize</keyword>
		<keyword>uint</keyword>
		<keyword>usize</keyword>
		<keyword>i8</keyword>
		<keyword>i16</keyword>
		<keyword>i32</keyword>
		<keyword>i64</keyword>
		<keyword>u8</keyword>
		<keyword>u16</keyword>
		<keyword>u32</keyword>
		<keyword>u64</keyword>
		<keyword>f32</keyword>
		<keyword>f64</keyword>
		<keyword>char</keyword>
		<keyword>str</keyword>
		<keyword>Option</keyword>
		<keyword>Result</keyword>
    </context>

    <context id="ctypes" style-ref="type">
		<keyword>c_float</keyword>
		<keyword>c_double</keyword>
		<keyword>c_void</keyword>
		<keyword>FILE</keyword>
		<keyword>fpos_t</keyword>
		<keyword>DIR</keyword>
		<keyword>dirent</keyword>
		<keyword>c_char</keyword>
		<keyword>c_schar</keyword>
		<keyword>c_uchar</keyword>
		<keyword>c_short</keyword>
		<keyword>c_ushort</keyword>
		<keyword>c_int</keyword>
		<keyword>c_uint</keyword>
		<keyword>c_long</keyword>
		<keyword>c_ulong</keyword>
		<keyword>size_t</keyword>
		<keyword>ptrdiff_t</keyword>
		<keyword>clock_t</keyword>
		<keyword>time_t</keyword>
		<keyword>c_longlong</keyword>
		<keyword>c_ulonglong</keyword>
		<keyword>intptr_t</keyword>
		<keyword>uintptr_t</keyword>
		<keyword>off_t</keyword>
		<keyword>dev_t</keyword>
		<keyword>ino_t</keyword>
		<keyword>pid_t</keyword>
		<keyword>mode_t</keyword>
		<keyword>ssize_t</keyword>
    </context>

    <context id="self" style-ref="identifier">
		<keyword>self</keyword>
    </context>

    <context id="constants" style-ref="constant">
		<keyword>true</keyword>
		<keyword>false</keyword>
		<keyword>Some</keyword>
		<keyword>None</keyword>
		<keyword>Ok</keyword>
		<keyword>Err</keyword>
		<keyword>Success</keyword>
		<keyword>Failure</keyword>
		<keyword>Cons</keyword>
		<keyword>Nil</keyword>
    </context>

    <context id="cconstants" style-ref="constant">
		<keyword>EXIT_FAILURE</keyword>
		<keyword>EXIT_SUCCESS</keyword>
		<keyword>RAND_MAX</keyword>
		<keyword>EOF</keyword>
		<keyword>SEEK_SET</keyword>
		<keyword>SEEK_CUR</keyword>
		<keyword>SEEK_END</keyword>
		<keyword>_IOFBF</keyword>
		<keyword>_IONBF</keyword>
		<keyword>_IOLBF</keyword>
		<keyword>BUFSIZ</keyword>
		<keyword>FOPEN_MAX</keyword>
		<keyword>FILENAME_MAX</keyword>
		<keyword>L_tmpnam</keyword>
		<keyword>TMP_MAX</keyword>
		<keyword>O_RDONLY</keyword>
		<keyword>O_WRONLY</keyword>
		<keyword>O_RDWR</keyword>
		<keyword>O_APPEND</keyword>
		<keyword>O_CREAT</keyword>
		<keyword>O_EXCL</keyword>
		<keyword>O_TRUNC</keyword>
		<keyword>S_IFIFO</keyword>
		<keyword>S_IFCHR</keyword>
		<keyword>S_IFBLK</keyword>
		<keyword>S_IFDIR</keyword>
		<keyword>S_IFREG</keyword>
		<keyword>S_IFMT</keyword>
		<keyword>S_IEXEC</keyword>
		<keyword>S_IWRITE</keyword>
		<keyword>S_IREAD</keyword>
		<keyword>S_IRWXU</keyword>
		<keyword>S_IXUSR</keyword>
		<keyword>S_IWUSR</keyword>
		<keyword>S_IRUSR</keyword>
		<keyword>F_OK</keyword>
		<keyword>R_OK</keyword>
		<keyword>W_OK</keyword>
		<keyword>X_OK</keyword>
		<keyword>STDIN_FILENO</keyword>
		<keyword>STDOUT_FILENO</keyword>
		<keyword>STDERR_FILENO</keyword>
    </context>

    <context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
      <start>//</start>
      <include>
        <context ref="def:in-line-comment"/>
      </include>
    </context>

    <context id="block-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
      <start>/\*</start>
      <end>\*/</end>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <define-regex id="int_suffix" extended="true">
      (i8|i16|i32|i64|i|u8|u16|u32|u64|u)
    </define-regex>

    <define-regex id="exponent" extended="true">
      ([eE][+-]?[0-9_]+)
    </define-regex>

    <define-regex id="float_suffix" extended="true">
      (\%{exponent}?(f32|f64)?)|(\.[0-9][0-9_]*\%{exponent}?)?(f32|f64)?|\.
    </define-regex>

    <define-regex id="num_suffix" extended="true">
      \%{int_suffix}|\%{float_suffix}
    </define-regex>

    <define-regex id="hex_digit" extended="true">
      [0-9a-fA-F]
    </define-regex>

    <define-regex id="oct_digit" extended="true">
      [0-7]
    </define-regex>

    <context id="number" style-ref="number">
      <match extended="true">
        ((?&lt;=\.\.)|(?&lt;![\w\.]))
        (
        [1-9][0-9_]*\%{num_suffix}?|
        0[0-9_]*\%{num_suffix}?|
        0b[01_]+\%{int_suffix}?|
        0o(\%{oct_digit}|_)+\%{int_suffix}?|
        0x(\%{hex_digit}|_)+\%{int_suffix}?
        )
        ((?![\w\.].)|(?=\.\.))
      </match>
    </context>

    <define-regex id="ident" extended="true">
      ([^[:cntrl:][:space:][:punct:][:digit:]]|_)([^[:cntrl:][:punct:][:space:]]|_)*
    </define-regex>

    <context id="scope" style-ref="scope">
      <match extended="true">
        \%{ident}::
      </match>
    </context>

    <context id="macro" style-ref="macro">
      <match extended="true">
        \%{ident}!
      </match>
    </context>

    <context id="lifetime" style-ref="keyword">
      <match extended="true">
        '\%{ident}
      </match>
    </context>

    <define-regex id="common_escape" extended="true">
      '|"|
      \\|n|r|t|0|
      x\%{hex_digit}{2}|
      u{\%{hex_digit}{1,6}}|
      u\%{hex_digit}{4}|
      U\%{hex_digit}{8}
    </define-regex>

    <context id="string_escape" style-ref="def:special-char">
      <match>\\\%{common_escape}</match>
    </context>

    <context id="raw-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>r(#*)"</start>
      <end>"\%{1@start}</end>
      <include>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="string_escape"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match extended="true">'([^\\']|\\\%{common_escape})'</match>
    </context>

    <context id="attribute" style-ref="attribute" class="attribute">
      <start extended="true">\#!?\[</start>
      <end>\]</end>
      <include>
        <context ref="def:in-comment"/>
        <context ref="string"/>
        <context ref="raw-string"/>
      </include>
    </context>

    <context id="rust" class="no-spell-check">
      <include>
        <context ref="function"/>
        <context ref="type"/>
        <context ref="keywords"/>
        <context ref="types"/>
        <context ref="ctypes"/>
        <context ref="self"/>
        <context ref="macro"/>
        <context ref="constants"/>
        <context ref="cconstants"/>
        <context ref="line-comment"/>
        <context ref="block-comment"/>
        <context ref="number"/>
        <context ref="scope"/>
        <context ref="string"/>
        <context ref="raw-string"/>
        <context ref="char"/>
        <context ref="lifetime"/>
        <context ref="attribute"/>
      </include>
    </context>

  </definitions>

</language>
