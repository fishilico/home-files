#!/usr/bin/env python
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Copyright (c) 2015-2020 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Invoke getaddrinfo from command line

The displayed information can also be retrieved with "getent ahosts" command,
from glibc.

@author: Nicolas Iooss
@license: MIT
"""
import argparse
import socket
import sys

# socket.IPPROTO_SCTP is not defined in Python 2
if 'IPPROTO_SCTP' not in socket.__all__:
    socket.IPPROTO_SCTP = 132
    socket.__all__.append('IPPROTO_SCTP')


def address_family(value):
    """Convert a string to an address family"""
    upper_value = value.upper()
    if value.isdigit():
        return int(value)
    elif upper_value.startswith('AF_') and hasattr(socket, upper_value):
        return getattr(socket, upper_value)
    elif hasattr(socket, 'AF_' + upper_value):
        return getattr(socket, 'AF_' + upper_value)
    raise argparse.ArgumentTypeError("%r is not an address family" % value)


def socket_type(value):
    """Convert a string to a socket type"""
    upper_value = value.upper()
    if value.isdigit():
        return int(value)
    elif upper_value.startswith('SOCK_') and hasattr(socket, upper_value):
        return getattr(socket, upper_value)
    elif hasattr(socket, 'SOCK_' + upper_value):
        return getattr(socket, 'SOCK_' + upper_value)
    raise argparse.ArgumentTypeError("%r is not a socket type" % value)


def proto_family(value):
    """Convert a string to a protocol family"""
    upper_value = value.upper()
    if value.isdigit():
        return int(value)
    elif upper_value.startswith('IPPROTO_') and hasattr(socket, upper_value):
        return getattr(socket, upper_value)
    elif upper_value.startswith('SOL_') and hasattr(socket, upper_value):
        return getattr(socket, upper_value)
    elif upper_value.startswith('PF_') and hasattr(socket, upper_value):
        return getattr(socket, upper_value)
    elif hasattr(socket, 'IPPROTO_' + upper_value):
        return getattr(socket, 'IPPROTO_' + upper_value)
    raise argparse.ArgumentTypeError("%r is not a protocol family" % value)


def retrieve_known_constants():
    """Retrieve socket AF_, SOCK_ and SOL_ constants"""
    known_af = {}
    known_sock = {}
    known_proto = {}
    for constant in socket.__all__:
        if constant.startswith('AF_'):
            known_af[getattr(socket, constant)] = constant[3:].lower()
        if constant.startswith('SOCK_'):
            known_sock[getattr(socket, constant)] = constant[5:].lower()
        if constant.startswith('IPPROTO_'):
            known_proto[getattr(socket, constant)] = constant[8:].lower()
    return known_af, known_sock, known_proto


def main(argv=None):
    """Parse arguments and run getaddrinfo on hostnames"""
    # pylint: disable=R0914
    parser = argparse.ArgumentParser(
        description="Resolve domain names and print "
        "(host, address, family, type, proto)")
    parser.add_argument('hosts', metavar='HOST', nargs='+',
                        help='hostname')
    parser.add_argument('-n', '--noptr', action='store_true',
                        help="never try to find PTR DNS records")
    parser.add_argument('--port', action='store',
                        type=int, default=None,
                        help="port number (default 0)")
    parser.add_argument('--passive', action='store_true',
                        help="resolve a passive address (AI_PASSIVE)")

    group = parser.add_argument_group('address family')
    group.add_argument('-f', '--family', action='store',
                       type=address_family, default=socket.AF_UNSPEC,
                       help="address family like AF_INET and AF_INET6")
    group.add_argument('-4', '--ipv4', action='store_const',
                       dest='family', const=socket.AF_INET,
                       help="use IPv4 address family (AF_INET)")
    group.add_argument('-6', '--ipv6', action='store_const',
                       dest='family', const=socket.AF_INET6,
                       help="use IPv6 address family (AF_INET6)")

    group = parser.add_argument_group('socket type')
    group.add_argument('-s', '--socktype', action='store',
                       type=socket_type, default=0,
                       help="socket type like SOCK_STREAM or SOCK_DGRAM")
    group.add_argument('--stream', action='store_const',
                       dest='socktype', const=socket.SOCK_STREAM,
                       help="STREAM socket type")
    group.add_argument('--dgram', action='store_const',
                       dest='socktype', const=socket.SOCK_DGRAM,
                       help="DGRAM socket type")
    group.add_argument('--seq', action='store_const',
                       dest='socktype', const=socket.SOCK_SEQPACKET,
                       help="SEQPACKET socket type")
    group.add_argument('-r', '--raw', action='store_const',
                       dest='socktype', const=socket.SOCK_RAW,
                       help="RAW socket type")

    group = parser.add_argument_group('protocol family')
    group.add_argument('-p', '--proto', action='store',
                       type=proto_family, default=0,
                       help="protocol family like IPPROTO_TCP or IPPROTO_UDP")
    group.add_argument('-t', '--tcp', action='store_const',
                       dest='proto', const=socket.IPPROTO_TCP,
                       help="TCP family")
    group.add_argument('-u', '--udp', action='store_const',
                       dest='proto', const=socket.IPPROTO_UDP,
                       help="UDP family")
    group.add_argument('--sctp', action='store_const',
                       dest='proto', const=socket.IPPROTO_SCTP,
                       help="SCTP family")
    args = parser.parse_args(argv)

    known_af, known_sock, known_proto = retrieve_known_constants()

    for host in args.hosts:
        try:
            gai_flags = 0
            if args.passive:
                gai_flags |= socket.AI_PASSIVE
            if host:
                gai_flags |= socket.AI_CANONNAME
            else:
                # getaddrinfo expects host=None when not using AI_CANONNAME
                # and it fails when both host and port are None:
                #     [Errno -2] Name or service not known
                host = None
                if args.port is None:
                    args.port = 0
            addressinfos = socket.getaddrinfo(host, args.port,
                                              args.family, args.socktype,
                                              args.proto, gai_flags)
        except socket.gaierror as exc:
            sys.stderr.write("getaddrinfo error: {}\n".format(exc))
            sys.exit(1)

        has_reversed_host = False
        for family, socktype, proto, canonname, sockaddr in addressinfos:
            if canonname and canonname != host.strip('.'):
                print("CNAME " + host + " = " + canonname)
            (address, port) = sockaddr[:2]
            if family == socket.AF_INET6:
                flow_info, scope_id = sockaddr[2:]
                if scope_id:
                    address += " scope " + str(scope_id)
                if flow_info:
                    address += " flow " + str(flow_info)

            # Use reversed hostname if an address was given and -n was not set
            if not has_reversed_host and not args.noptr and host == address:
                has_reversed_host = True
                try:
                    host = socket.gethostbyaddr(address)[0]
                except socket.herror:
                    pass

            line = (host or '<empty>') + " " + address
            if port:
                line += " port " + str(port)
            line += " " + known_af.get(family, "family-" + str(family))
            line += " " + known_sock.get(socktype, "socktype-" + str(socktype))
            line += " " + known_proto.get(proto, "proto-" + str(proto))
            print(line)


if __name__ == '__main__':
    main()
