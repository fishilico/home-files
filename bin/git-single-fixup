#!/bin/sh
# SPDX-License-Identifier: MIT
#
# Copyright (c) 2015-2020 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Add files to the index and create a fixup commit
#
# Usage example:
# let's suppose a projet has a commit in its local history (not pushed),
# "badc0ffee", which modifies files abc and def.  After some testing, these
# files need to be modified again in the commit.  The usual workflow is then:
#
#   # Add abc and def to the index
#   git add abc def
#   # Find badc0ffee hash
#   git log --pretty=oneline --abbrev-commit --max-count=1 abc def
#   # Create a fixup commit
#   git commit --fixup badc0ffee
#   # Create a new commit (may be after some time, when syncing branches)
#   git rebase -i --autosquash 'badc0ffee^'
#
# This script aims to merge the three first steps.  Adding "-r" make it also
# perform the final rebase.

DO_AUTOCOMMIT=false
DO_REBASE=false

while getopts ":ahr" OPT
do
    case "$OPT" in
        h)
            echo "Usage: $0 [OPTIONS] [FILES]"
            echo "Add files to the index and create a fixup commit"
            echo ""
            echo "Options:"
            echo "  -a       autocommit modified files (like git commit -a)"
            echo "  -h       display this help and exit"
            echo "  -r       rebase after creating the fixup commit"
            exit
            ;;
        a)
            DO_AUTOCOMMIT=true
            ;;
        r)
            DO_REBASE=true
            ;;
        \?)
            printf >&2 "%s: invalid option '%s'"\\n "$0" "$OPTARG"
            echo >&2 "Try '$0 -h' for more information."
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))
if [ $# -ge 1 ]
then
    # Add the files and find the commit
    if ! git add -- "$@"
    then
        echo >&2 "Failed to add files to current index. Aborting"
        exit 1
    fi
    HASH="$(git log --format='%H' --max-count=1 "$@")"
else
    if "$DO_AUTOCOMMIT"
    then
        # Commit the modified files
        git add -u || exit $?
    fi
    # Find the modified files
    HASH="$(
        cd "$(git rev-parse --show-toplevel)" &&
        git status -z | \
        sed -z -n 's/^[ACDMR]  //p' | \
        xargs -0 git log --format='%H' --max-count=1 --)"
fi

if [ -z "$HASH" ]
then
    echo >&2 "Unable to find the commit to fix"
    exit 1
fi

# Create a fixup commit
if ! git commit --fixup "$HASH"
then
    echo >&2 "Failed to create a fixup commit. Aborting"
    exit 1
fi

if "$DO_REBASE"
then
    git -c core.editor=true rebase -i --autosquash "$HASH^" || exit $?
fi
