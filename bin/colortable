#!/usr/bin/env python
# -*- coding:UTF-8 -*-
# Copyright (c) 2014 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Display terminal colors in a table

@author: Nicolas Iooss
@license: MIT
"""

import argparse

# 16-colors index table
COLORS16_RGB = [
    0x000000, 0x800000, 0x008000, 0x808000,
    0x000080, 0x800080, 0x008080, 0xc0c0c0,
    0x808080, 0xff0000, 0x00ff00, 0xffff00,
    0x0000ff, 0xff00ff, 0x00ffff, 0xffffff]


def build_colors256():
    """Build a 256-colors index table"""
    # First 16 colors are the same as COLOR16
    colors = [] + COLORS16_RGB

    # Then, 6*6*6 = 216 colors
    colors6 = [0, 95, 135, 175, 215, 255]
    # pylint: disable=C0103
    for r in colors6:
        for g in colors6:
            for b in colors6:
                colors.append((r << 16) | (g << 8) | b)

    # 24 shades of gray
    colors += [0x010101 * i for i in range(8, 239, 10)]
    return colors

COLORS256_RGB = build_colors256()
assert(len(COLORS256_RGB) == 256)


def color_index2term(index, visible=False, usebg=False):
    """Format a color index to a nice terminal representation

    Parameters
    ----------
    index: a color index between 0 and 255

    visible: boolean, optional, default: False
        tweak colors to always make text visible,
        force white background when displaying black text and vice-versa

    usebg: boolean, optional, default: False
        change background color instead of foreground

    Returns
    -------
    A string suitable to represent a color in a table
    """
    if index < 0 or index > 256:
        return ""
    color = COLORS256_RGB[index]
    # pylint: disable=C0103
    r, g, b = (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff

    # compute escape sequence which ensure a text to be visible, if needed
    escape_sequence = ''
    if visible:
        if not usebg:
            # White background for dark foreground colors
            escape_sequence = '107;' if r + g + b < 192 else '40;'
        else:
            # Black foreground for light background colors
            escape_sequence = '30;' if r + g + b >= 510 else '97;'

    # Use several escape sequences so that 16-colors appears correctly on
    # non-256color terms
    escape_index = 0
    if index < 8:
        escape_index = 30 + index + (10 if usebg else 0)
        escape_sequence += str(escape_index)
    elif index < 16:
        escape_index = 90 - 8 + index + (10 if usebg else 0)
        escape_sequence += str(escape_index)
    elif usebg:
        escape_sequence += '48;5;{}'.format(index)
    else:
        escape_sequence += '38;5;{}'.format(index)

    return "\033[{}m{:3d}:{} {:02x}/{:02x}/{:02x}\033[m".format(
        escape_sequence, index,
        "" if not escape_index else "[{:3d}]".format(escape_index),
        r, g, b)


def main(argv=None):
    """Program entry point"""
    parser = argparse.ArgumentParser(
        description="Display terminal colors in a table")
    parser.add_argument('-b', '--background', action='store_true',
                        help="change background color instead of foreground")
    parser.add_argument('-v', '--visible', action='store_true',
                        help="tweak colors to always make text visible")
    args = parser.parse_args(argv)

    # Display the table
    print("16-colors table:")
    for line in range(4):
        print(" ".join([
            color_index2term(4*line + col, args.visible, args.background)
            for col in range(4)]))
    print("")

    print("216-RGB-colors table:")
    for line in range(36):
        print(" ".join([
            color_index2term(6*line + col + 16, args.visible, args.background)
            for col in range(6)]))
    print("")

    print("24-gray-colors table:")
    for line in range(4):
        print(" ".join([
            color_index2term(6*line + col + 232, args.visible, args.background)
            for col in range(6)]))


if __name__ == '__main__':
    main()
