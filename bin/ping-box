#!/bin/bash
# SPDX-License-Identifier: MIT
#
# Copyright (c) 2013-2020 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Ping my net box at home, wifi unstable wifi interface

function echo_red()
{
    echo -e '\e[31;1m!!' "$*"'\e[m'
}
function echo_green()
{
    echo -e '\e[32m[]' "$*"'\e[m'
}
function echo_blue()
{
    echo -e '\e[34;1m[]' "$*"'\e[m'
}
function echo_white()
{
    echo -e '\e[m[]' "$*"'\e[m'
}
function echo_startgray()
{
    echo -ne '\e[37m'
}

function test_network()
{
    local IFACE IPADDR IPGW

    # Find default route interface
    IFACE=$(ip -oneline -4 route show default |
        sed -ne 's/^.*dev \([^ ]\+\) .*$/\1/;1p')
    if [ -z "$IFACE" ]
    then
        echo -ne '\r!! No default route, network is unreachable'
        return 1
    fi

    # Do nothing if interface does not have an IP address
    if [ -z "$(ip -oneline -4 addr show dev "$IFACE")" ]
    then
        echo -ne '\r!! No IP address for' "$IFACE"
        return 1
    fi
    echo_white "$(date)"

    IPADDR=$(ip -oneline -4 addr show dev "$IFACE" |
        sed -ne 's/^.* inet \([^ ]\+\) .*$/\1/p' |xargs echo)
    echo_green "Network is UP on $IFACE ($IPADDR)"

    # Default gateway
    IPGW=$(ip -oneline -4 route show default dev "$IFACE" |
        sed -ne 's/^.* via \([^ ]\+\) .*$/\1/p')
    if [ -n "$IPGW" ] && [ -z "$(ip neigh show "$IPGW" dev "$IFACE")" ]
    then
        # Fill ARP table with a ping
        echo_startgray
        ping -c1 "$IPGW"
    fi
    if [ -z "$(ip neigh show "$IPGW" dev "$IFACE")" ]
    then
        echo_red "Gateway not found"
        return 1
    fi
    echo_green "Gateway ($IPGW) is present"

    # Ping BOX
    echo_startgray
    if ping -c2 "$IPGW"
    then
        echo_green "Gateway pinged"
    else
        echo_red "Gateway unreachable"
        return 1
    fi

    # Ping Google
    echo_startgray
    if ping -c1 "www.google.com"
    then
        echo_green "Google pinged"
    else
        echo_red "Google unreachable"
        return 1
    fi

    return 0
}

COUNT=0
while true
do
    if test_network
    then
        COUNT=$((COUNT+1))
        if [ $COUNT = 1 ]
        then
            echo_blue "First successful ping ^^ !"
        else
            echo_blue "#$COUNT successful ping"
        fi
    else
        if [ $COUNT != 0 ]
        then
            echo_red "You are now disconnected :("
            COUNT=0
        fi
    fi
    sleep 30
done
