#!/usr/bin/env python
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Copyright (c) 2015-2023 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Compute CRC32 of parameters or of standard input

This program implement CRC32 (32-bit Cyclic Redundancy Check) in a naive but
understandable way.  Optimised implementations use a table with the CRC32 of
the 256 possible byte values.

Examples:

* Hello world

    $ crc32 'Hello, world!'
    0xcff859f6

* cksum command

    $ crc32 -cd 'Hello, world!'
    1403953672
    $ printf 'Hello, world!' | cksum
    1403953672 13

* Zip CRC32

    $ printf '\x80' | crc32 -r
    0xedb88320
    $ python -c \
      'from binascii import crc32;print(hex(~crc32(b"\x80",-1)&0xffffffff))'
    0xedb88320

* CRC32C polynom

    $ printf '\001' | crc32 -p C
    0x1edc6f41

* Python CRC32

    $ printf 'test' | crc32 -r -s -1
    0x278081f3
    $ python -c \
        'from binascii import crc32;print(hex(~crc32(b"test")&0xffffffff))'
    0x278081f3


Documentation:
* https://en.wikipedia.org/wiki/Cyclic_redundancy_check
  Wikipedia article, which gives some polynomials
* http://git.sv.gnu.org/gitweb/?p=coreutils.git;a=blob;f=src/cksum.c;hb=HEAD
  cksum source code
"""
import argparse
import sys


# Standard polynoms
POLY_CRC32 = 0x04c11db7
POLY_CRC32C = 0x1edc6f41  # Castagnoli, SSE4.2 "CRC32" instruction
POLY_CRC32K = 0x741b8cd7  # Koopman
POLY_CRC32Q = 0x814141ab


def get_polynom(polynom=None):
    """Get the specified polynom for CRC32"""
    if polynom is None:
        return POLY_CRC32
    polynom = polynom.strip().upper()
    if polynom.startswith('0X'):
        return int(polynom[2:], 16)
    if polynom.startswith('CRC32'):
        polynom = polynom[5:].lstrip(' \t-_')
    if polynom == '':
        return POLY_CRC32
    if polynom in ('C', 'SSE4'):
        return POLY_CRC32C
    if polynom == 'K':
        return POLY_CRC32K
    if polynom == 'Q':
        return POLY_CRC32Q
    raise ValueError("invalid polynom {0}".format(polynom))


def crc32_idata(polynom, idata, value=0):
    """Add the given data to the currently-computed value

    data is a list of integers between 0 and 255
    """
    for ibyte in idata:
        value ^= ibyte << 24
        for _ in range(8):
            carry = (value >> 31) & 1
            value = (value << 1) & 0xffffffff
            if carry & 1:
                value ^= polynom
    return value


def crc32_idata_rev(polynom, idata, value=0):
    """Add the given data to the currently-computed value, by shifting to right

    data is a list of integers between 0 and 255
    """
    for ibyte in idata:
        value ^= ibyte
        for _ in range(8):
            carry = value & 1
            value = value >> 1
            if carry:
                value ^= polynom
    return value


def crc32(polynom, data, value=0, reverse=False):
    """Compute the CRC32 of data with given polynom"""
    if reverse:
        if sys.version_info >= (3, ):
            return crc32_idata_rev(polynom, (d & 0xff for d in data), value)
        else:
            return crc32_idata_rev(polynom, (ord(d) for d in data), value)
    else:
        if sys.version_info >= (3, ):
            return crc32_idata(polynom, (d & 0xff for d in data), value)
        else:
            return crc32_idata(polynom, (ord(d) for d in data), value)


def cksum(polynom, value, length, reverse=False):
    """Encode the length to the CRC32 value and invert the result"""
    while length > 0:
        if reverse:
            value = crc32_idata_rev(polynom, [length & 0xff], value)
        else:
            value = crc32_idata(polynom, [length & 0xff], value)
        length = length >> 8
    return (~value) & 0xffffffff


def reverse32_bits(num):
    """Reverse the bits of a 32-bit number"""
    num = ((num & 0x55555555) << 1) | ((num & 0xaaaaaaaa) >> 1)
    num = ((num & 0x33333333) << 2) | ((num & 0xcccccccc) >> 2)
    num = ((num & 0x0f0f0f0f) << 4) | ((num & 0xf0f0f0f0) >> 4)
    num = ((num & 0x00ff00ff) << 8) | ((num & 0xff00ff00) >> 8)
    num = ((num & 0x0000ffff) << 16) | ((num & 0xffff0000) >> 16)
    assert (num & ~0xffffffff) == 0
    return num


def main(argv=None):
    parser = argparse.ArgumentParser(description="Compute CRC32")
    parser.add_argument('text', metavar='TEXT', nargs='*',
                        help="text to run CRC32 on (default: use stdin)")
    parser.add_argument('-c', '--cksum', action='store_true',
                        help="encode length too and invert the result (cksum)")
    parser.add_argument('-d', '--decimal', action='store_true',
                        help="show the result in decimal (like cksum)")
    parser.add_argument('-p', '--polynom', type=str,
                        help="polynom to use (in hex notation or name)")
    parser.add_argument('-r', '--reverse', action='store_true',
                        help="reverse direction of CRC (and of polynom)")
    parser.add_argument('-s', '--start', type=int, default=0,
                        help="value to start with (default 0, sometimes -1")
    args = parser.parse_args(argv)

    try:
        polynom = get_polynom(args.polynom)
    except ValueError as exc:
        parser.error(exc.args[0])

    if args.reverse:
        polynom = reverse32_bits(polynom)

    value = args.start & 0xffffffff

    if args.text:
        for text in args.text:
            data = text.encode('utf8')
            value = crc32(polynom, text.encode('utf8'), value=value,
                          reverse=args.reverse)
            if args.cksum:
                value = cksum(polynom, value, len(data), args.reverse)
            print(value if args.decimal else '0x{0:08x}'.format(value))
    else:
        stdin = sys.stdin.buffer if sys.version_info >= (3, ) else sys.stdin
        length = 0
        while True:
            data = stdin.read(4096)
            if len(data) == 0:
                break
            value = crc32(polynom, data, value=value, reverse=args.reverse)
            length += len(data)
        if args.cksum:
            value = cksum(polynom, value, length, reverse=args.reverse)
        print(value if args.decimal else '0x{0:08x}'.format(value))


if __name__ == '__main__':
    main()
