#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2015-2017 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Convert a system call number to its text identifier and back

@author: Nicolas Iooss
@license: MIT
"""
import argparse
import os
import os.path
import platform
import re
import sys
import webbrowser


# Well-known locations of syscall C headers per architecture
# Kernel locations are relative to /usr/src/linux or
# https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/
SC_INCLUDE_LOCATIONS = {
    'arm': (
        ('kernel', 'arch/arm/tools/syscall.tbl'),
        ('natinc', 'asm/unistd-common.h'),
        ('inc', 'arm-linux-gnueabihf/asm/unistd-common.h'),
        ('natinc', 'asm/unistd.h'),
        ('inc', 'arm-linux-gnueabihf/asm/unistd.h'),
        ('kernel', 'arch/arm/include/uapi/asm/unistd.h'),
    ),
    'arm64': (
        ('natinc', 'asm-generic/unistd.h'),
        ('inc', 'aarch64-linux-gnu/asm-generic/unistd.h'),
        ('kernel', 'include/uapi/asm-generic/unistd.h'),
    ),
    'x86_32': (
        ('natinc', 'asm/unistd_32.h'),
        ('inc', 'i386-linux-gnu/asm/unistd_32.h'),
        ('inc', 'x86_64-linux-gnu/asm/unistd_32.h'),
        ('kernel', 'arch/x86/entry/syscalls/syscall_32.tbl'),
        # Kernel header generated from arch/x86/entry/syscalls/syscall_32.tbl
        ('kernel', 'arch/x86/include/generated/uapi/asm/unistd_32.h'),
    ),
    'x86_64': (
        ('natinc', 'asm/unistd_64.h'),
        ('inc', 'x86_64-linux-gnu/asm/unistd_64.h'),
        ('inc', 'i386-linux-gnu/asm/unistd_64.h'),
        ('kernel', 'arch/x86/entry/syscalls/syscall_64.tbl'),
        # Kernel header generated from arch/x86/entry/syscalls/syscall_64.tbl
        ('kernel', 'arch/x86/include/generated/uapi/asm/unistd_64.h'),
    ),
}

# List of (native, current) compatible tuples
COMPAT_ARCHS = (
    ('x86_64', 'x86_32'),
)


def normalize_arch(arch):
    """Normalize the name of an architecture"""
    arch = arch.lower()
    if re.match(r'^armv[1-9]+l$', arch):
        return 'arm'
    if arch == 'aarch64':
        return 'arm64'
    if re.match(r'^i[3-6]86$', arch):
        return 'x86_32'
    if arch in ('amd64', 'x86-64'):
        return 'x86_64'
    if arch in ('x86', 'x86-32'):
        return 'x86_32'
    return arch


def find_syscall_include(arch=None):
    """Find a C include header with all syscalls of the supplied architecture
    """
    native_arch = normalize_arch(platform.machine())
    arch = normalize_arch(arch) if arch is not None else native_arch
    if arch not in SC_INCLUDE_LOCATIONS:
        sys.stderr.write("Unknown architecture {0}\n".format(arch))
        return

    tried_locations = []
    for loctype, path in SC_INCLUDE_LOCATIONS[arch]:
        if loctype == 'natinc':
            # Path into "native" include directory
            if arch != native_arch and (native_arch, arch) not in COMPAT_ARCHS:
                continue
            loctype = 'inc'  # Fall-through
        if loctype == 'inc':
            fullpath = os.path.join('/usr/include', path)
            if os.path.exists(fullpath):
                return fullpath, arch
            tried_locations.append(fullpath)
        elif loctype == 'kernel':
            # Use path to kernel build headers
            kernel_build = '/lib/modules/{0}/build'.format(platform.release())
            fullpath = os.path.join(kernel_build, path)
            if os.path.exists(fullpath):
                return fullpath, arch

            # Kernel source checkout directory
            fullpath = os.path.join('/usr/src/linux', path)
            if os.path.exists(fullpath):
                return fullpath, arch
            tried_locations.append(fullpath)

    sys.stderr.write("Unable to find an include header for {0}\n".format(arch))
    sys.stderr.write("Here are the locations which were tried:\n{0}\n".format(
        '\n'.join(tried_locations)))
    return


def is_ifcondition_enabled(arch, if_cond):
    """Test the #if condition for the specified architecture"""
    if_cond_orig = if_cond

    # Replace every defined(...) with 0 and 1
    known_defined = {
        '__ARCH_NOMMU': False,
        '__ARCH_WANT_RENAMEAT': False,
        '__ARCH_WANT_SYSCALL_DEPRECATED': False,
        '__ARCH_WANT_SYSCALL_OFF_T': False,
        '__ARCH_WANT_SYSCALL_NO_AT': False,
        '__ARCH_WANT_SYSCALL_NO_FLAGS': False,
        '__ARCH_WANT_SYNC_FILE_RANGE2': False,
        '__SYSCALL': False,
        '__SYSCALL_COMPAT': False,
        'CONFIG_MMU': True,

        # Header guards
        '__ASM_ARM_UNISTD_H': False,
        '_ASM_ARM_UNISTD_COMMON_H': False,
        '_ASM_X86_UNISTD_32_H': False,
        '_ASM_X86_UNISTD_64_H': False,
        '_UAPI__ASM_ARM_UNISTD_H': False,
    }
    if arch == 'arm64':
        # arch/arm64/include/uapi/asm/unistd.h defines __ARCH_WANT_RENAMEAT
        known_defined['__ARCH_WANT_RENAMEAT'] = True
    known_defined['__NR3264_stat'] = known_defined['__ARCH_WANT_SYSCALL_NO_AT']

    while True:
        matches = re.match(r'^(.*)\bdefined\s*\(\s*(\w+)\s*\)(.*)$', if_cond)
        if matches is None:
            break
        prefix, name, suffix = matches.groups()
        value = known_defined.get(name)
        if value is None:
            # Default value is "False"
            sys.stderr.write("Unknown preprocessor variable: {0}\n".format(name))
        if_cond = prefix + ('1' if value else '0') + suffix

    # Replace __BITS_PER_LONG
    if '__BITS_PER_LONG' in if_cond:
        bits_per_long_value = None
        if arch in ('arm', 'x86_32'):
            bits_per_long_value = 32
        elif arch in ('arm64', 'x86_64'):
            bits_per_long_value = 64
        assert bits_per_long_value is not None, "Unknown __BITS_PER_LONG value for {0}".format(arch)
        if_cond = re.sub(r'\b__BITS_PER_LONG\b', str(bits_per_long_value), if_cond)

    # Implement simple substitution patterns to simplify expressions
    while True:
        if_cond = if_cond.strip()
        if if_cond in ('0', '1'):
            return if_cond == '1'
        matches = re.match(r'^(.*)!([0-9]+)(.*)$', if_cond)
        if matches is not None:
            prefix, value, suffix = matches.groups()
            if_cond = prefix + ('1' if not int(value) else '0') + suffix
            continue
        matches = re.match(r'^(.*)\(\s*([0-9]+)\s*\)(.*)$', if_cond)
        if matches is not None:
            prefix, value, suffix = matches.groups()
            if_cond = prefix + ' ' + value + ' ' + suffix
            continue
        matches = re.match(r'^(.*)\b([0-9]+)\s*==\s*([0-9]+)\b(.*)$', if_cond)
        if matches is not None:
            prefix, val1, val2, suffix = matches.groups()
            if_cond = prefix + ('1' if int(val1) == int(val2) else '0') + suffix
            continue
        matches = re.match(r'^(.*)\b([0-9]+)\s*\|\|\s*([0-9]+)\b(.*)$', if_cond)
        if matches is not None:
            prefix, val1, val2, suffix = matches.groups()
            if_cond = prefix + ('1' if int(val1) or int(val2) else '0') + suffix
            continue
        matches = re.match(r'^(.*)\b([0-9]+)\s*&&\s*([0-9]+)\b(.*)$', if_cond)
        if matches is not None:
            prefix, val1, val2, suffix = matches.groups()
            if_cond = prefix + ('1' if int(val1) and int(val2) else '0') + suffix
            continue
        break
    raise RuntimeError("Unable to evaluation condition {0} from {1}".format(
        if_cond, if_cond_orig))


def read_syscalls_from_header_file(filename, arch):
    """Build a syscall dictionary from the given C header file"""
    syscalls = {}
    syscall_relative = []
    special_names = (
        'OABI_SYSCALL_BASE',
        'SYSCALL_BASE',
        'syscalls',
    )
    other_macros = {}
    # Stack of #if statements:
    #   0 if disabled #if,
    #   1 if enabled #if,
    #   2 if #else after a successful #if (it never succeeds)
    #   3 if #if block in a disabled block
    if_stack = [1]
    current_if_statement = None
    current_if_statement_type = None
    with open(filename, 'r') as headerfile:
        for line in headerfile:
            line = line.rstrip()

            # Find an #if statement
            if current_if_statement is not None:
                # Line continuation
                current_if_statement += ' ' + line
            else:
                # Start #if or #elif
                matches = re.match(r'#\s*(if|ifdef|ifndef|elif) (.*)', line)
                if matches is not None:
                    current_if_statement_type, current_if_statement = matches.groups()

            if current_if_statement is not None:
                if current_if_statement.endswith('\\'):
                    current_if_statement = current_if_statement[:-1]
                    continue
                # Convert #ifdef
                if current_if_statement_type == 'ifdef':
                    current_if_statement_type = 'if'
                    current_if_statement = 'defined({0})'.format(current_if_statement)
                elif current_if_statement_type == 'ifndef':
                    current_if_statement_type = 'if'
                    current_if_statement = '!defined({0})'.format(current_if_statement)

                # if we already are in a disabled block, stay disabled
                if current_if_statement_type == 'if' and if_stack[-1] in (0, 2, 3):
                    if_stack.append(3)
                    current_if_statement = None
                    continue
                if current_if_statement_type == 'elif' and if_stack[-1] in (1, 2, 3):
                    if if_stack[-1] == 1:
                        if_stack[-1] = 2
                    current_if_statement = None
                    continue
                # Interpret the #if statement
                result = is_ifcondition_enabled(arch, current_if_statement)
                if current_if_statement_type == 'if':
                    if_stack.append(1 if result else 0)
                elif current_if_statement_type == 'elif':
                    if_stack[-1] = 1 if result else 0
                current_if_statement = None
                continue

            # Parse #else
            if re.match(r'#\s*else', line):
                assert len(if_stack) >= 2
                if if_stack[-1] == 0:
                    if_stack[-1] = 1
                elif if_stack[-1] == 1:
                    if_stack[-1] = 2
                continue

            # Parse #endif
            if re.match(r'#\s*endif', line):
                assert len(if_stack) >= 2
                if_stack.pop()

            # Skip disabled lines
            if if_stack[-1] != 1:
                continue

            matches = re.match(r'#define\s+__NR_(\S+)\s+(.*)', line)
            if matches is not None:
                name, rawnum = matches.groups()

                # Skip special names
                if name in special_names:
                    continue

                # Check unicity
                if name in syscalls:
                    raise RuntimeError("Syscall {0} is defined twice".format(name))

                # Decode rawnum
                rawnum = rawnum.strip().replace(' ', '')
                rawnum = rawnum.replace('\t', '')
                rawnum = re.sub(r'/\*.*\*/', '', rawnum)

                # Find a macro like "#define __NR_fcntl __NR3264_fcntl"
                if rawnum in other_macros:
                    rawnum = other_macros[rawnum]
                    rawnum = rawnum.strip().replace(' ', '')
                    rawnum = rawnum.replace('\t', '')
                    rawnum = re.sub(r'/\*.*\*/', '', rawnum)

                # Find relative syscalls
                matches = re.match(r'\(__NR_([^)+]+)\+(.*)\)$', rawnum)
                if matches is not None:
                    relative_name, raw_offset = matches.groups()
                    if relative_name in special_names:
                        # (__NR_SYSCALL_BASE+offset) -> offset
                        rawnum = raw_offset
                    elif re.match(r'[0-9]+$', raw_offset):
                        # Save a syscall relative to another one
                        offset = int(raw_offset)
                        syscall_relative.append((name, relative_name, offset))
                        continue
                    elif re.match(r'0x[0-9a-fA-F]+$', raw_offset):
                        # Save a syscall relative to another one
                        offset = int(raw_offset[2:], 16)
                        syscall_relative.append((name, relative_name, offset))
                        continue

                if rawnum.startswith('__NR_'):
                    # Syscall aliases
                    syscall_relative.append((name, rawnum[5:], 0))
                elif re.match(r'[0-9]+$', rawnum):
                    # Record decimal syscall number
                    syscalls[name] = int(rawnum)
                elif re.match(r'0x[0-9a-fA-F]+$', rawnum):
                    # Record hexadecimal syscall number
                    syscalls[name] = int(rawnum[2:], 16)
                else:
                    sys.stderr.write(
                        "Invalid syscall number on line: {0}\n".format(line))
                continue

            # Record other single-line macros, where they may be used
            matches = re.match(r'#define\s+(\S+)\s+(\S+)', line)
            if matches is not None:
                name, value = matches.groups()
                if '(' not in name and not value.endswith('\\'):
                    other_macros[name] = value

    if current_if_statement is not None:
        sys.stderr.write("Unfinished #{0} statement: {1}\n".format(
            current_if_statement_type, current_if_statement))
    if if_stack != [1]:
        sys.stderr.write("Unexpected #if stack final state: {0}\n".format(
            if_stack))

    # Put aliases into syscall_list
    for alias, real, offset in syscall_relative:
        if real in syscalls:
            syscalls[alias] = syscalls[real] + offset
        else:
            sys.stderr.write("Undefined relative syscall {0} = {1} + {2}\n"
                             .format(alias, real, offset))
    return syscalls


def read_syscalls_from_table_file(filename, arch):
    """Build a syscall dictionary from the given table file"""
    syscalls = {}
    # White-list the ABI identifiers which are used
    if re.search(r'arch/arm/.*/syscall\.tbl', filename):
        assert arch == 'arm'
        used_abis = frozenset(['common', 'eabi', 'oabi'])
        unused_abis = frozenset()
    elif re.search(r'arch/x86/.*/syscall_32\.tbl', filename):
        assert arch == 'x86_32'
        used_abis = frozenset(['i386'])
        unused_abis = frozenset()
    elif re.search(r'arch/x86/.*/syscall_64\.tbl', filename):
        assert arch == 'x86_64'
        used_abis = frozenset(['common', '64'])
        unused_abis = frozenset(['x32'])
    else:
        raise RuntimeError("Unimplemented table {0}".format(filename))
    with open(filename, 'r') as headerfile:
        for line in headerfile:
            matches = re.match(r'([0-9]+)\s+(\S+)\s+(\S+)', line)
            if matches is not None:
                rawnum, abi, name = matches.groups()

                if abi in unused_abis:
                    continue
                elif abi not in used_abis:
                    sys.stderr.write("Unknown ABI: {0}\n".format(abi))
                    continue

                # Check unicity
                assert name not in syscalls
                syscalls[name] = int(rawnum)
            else:
                line = line.split('#', 1)[0].strip()
                if line:
                    sys.stderr.write(
                        "Invalid line in table: {0}\n".format(line))
    return syscalls


def read_syscalls_from_file(filename, arch):
    """Build a syscall dictionary from a file"""
    if filename.endswith('.h'):
        return read_syscalls_from_header_file(filename, arch)
    if filename.endswith('.tbl'):
        return read_syscalls_from_table_file(filename, arch)
    # This is an internal error in SC_INCLUDE_LOCATIONS
    raise RuntimeError("Unknwon file extenstion of {0}".format(filename))


def syscall_number(name, syscalls_name2nr, syscalls_nr2name):
    """Convert a possible string representation of a syscall to a number"""
    name = name.strip().replace(' ', '')
    if name.startswith('__NR_'):
        name = name[5:]
    elif name.startswith('NR_'):
        name = name[3:]
    elif name.startswith('SYS_'):
        name = name[4:]

    if re.match(r'[0-9]+$', name):
        num = int(name)
    elif re.match(r'0x[0-9a-fA-F]+$', name):
        num = int(name[2:], 16)
    elif name in syscalls_name2nr:
        num = syscalls_name2nr[name]
    elif name.lower() in syscalls_name2nr:
        num = syscalls_name2nr[name.lower()]
    else:
        raise ValueError("unknown syscall {0}".format(name))

    if num not in syscalls_nr2name:
        raise ValueError("unknown syscall number {0}".format(num))
    return num


def main(argv=None):
    parser = argparse.ArgumentParser(
        description="Convert a system call number to its text identifier")
    parser.add_argument('syscalls', metavar='SC', nargs='*',
                        help="system calls to analyze")
    parser.add_argument('-a', '--arch', type=str,
                        help="architecture to use")
    parser.add_argument('-b', '--browser', action='store_true',
                        help="open the associated man page in a browser")
    parser.add_argument('-H', '--show-header', action='store_true',
                        help="show the used header file")
    parser.add_argument('-l', '--list', action='store_true',
                        help="list the available system calls")
    parser.add_argument('-L', '--list-sorted', action='store_true',
                        help="list the system calls with a sort by name")
    parser.add_argument('-m', '--man', action='store_true',
                        help="open the associated man page")
    args = parser.parse_args(argv)

    if args.list_sorted:
        args.list = True

    if not args.list and not args.show_header and not args.syscalls:
        parser.print_help()
        return 0

    # Find an include file according to the architecture
    filename_arch = find_syscall_include(args.arch)
    if not filename_arch:
        return 1
    filename, arch = filename_arch

    if args.show_header:
        print("Using {0}".format(filename))

    # Parse the file
    name2nr = read_syscalls_from_file(filename, arch)

    # Reverse the syscalls mappings
    nr2name = {}
    for name, num in name2nr.items():
        nr2name.setdefault(num, set()).add(name)

    # Find which syscalls to list according to the program arguments
    if args.list_sorted:
        syscalls_list = [nr for _, nr in sorted(name2nr.items())]
    elif args.list:
        syscalls_list = sorted(nr2name.keys())
    else:
        try:
            syscalls_list = [syscall_number(name, name2nr, nr2name)
                             for name in args.syscalls]
        except ValueError as exc:
            parser.error(exc.args[0])

    # Exit if no syscall is to be show
    if not syscalls_list:
        return 0

    # Show selected syscalls
    nr_format = "{0:" + str(len(str(max(syscalls_list)))) + "}"
    for sc_nr in syscalls_list:
        names = sorted(nr2name[sc_nr])
        print((nr_format + ": {1}").format(sc_nr, ', '.join(names)))

    # Open man pages
    if args.browser:
        url_pattern = 'http://man7.org/linux/man-pages/man2/{0}.2.html'
        for sc_nr in syscalls_list:
            # Take first name of aliases, as man pages are anyway linked
            url = url_pattern.format(sorted(nr2name[sc_nr])[0])
            print("Opening {0}".format(url))
            webbrowser.open(url)
    elif args.man:
        for sc_nr in syscalls_list:
            name = sorted(nr2name[sc_nr])[0]
            os.system('man 2 "{0}"'.format(name))
    return 0


if __name__ == '__main__':
    sys.exit(main())
