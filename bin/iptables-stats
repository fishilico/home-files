#!/bin/sh
# SPDX-License-Identifier: MIT
#
# Copyright (c) 2013-2020 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# View iptables statistics from --list output
# Filter out unmatched lines to have a more compact output

# Default options
IPT_NUMERIC=' --numeric'
SHORT_OUTPUT='false'
RUN_IP4='true'
RUN_IP6='true'

# Run iptables or ip6tables, filtering out non matched rules
run_ipt_nomatch() {
    if [ $# -ge 2 ]
    then
        $1 --verbose --list "$2" | grep -Ev '^ *0 *0'
    else
        $1 --verbose --list | grep -Ev '^ *0 *0'
    fi
}

ipt_stats() {
    local CURRENT_CHAIN IPT LINE PREFIX
    PREFIX=$1
    IPT=$2
    CURRENT_CHAIN=""

    # Get active chains, which contains at least one active rule
    for LINE in $(run_ipt_nomatch "$IPT --numeric" | tr ' ' '_')
    do
        if printf %s\\n "$LINE" | grep -qE '^Chain_'
        then
            CURRENT_CHAIN=$(printf %s\\n "$LINE" | sed -n 's/^Chain_\(.*\)_(.*/\1/p')
            if [ -z "$CURRENT_CHAIN" ]
            then
                echo >&2 "Unable to parse chain header line: $LINE"
                return 1
            fi
        elif [ -n "$CURRENT_CHAIN" ] && printf %s\\n "$LINE" | grep -qE '^_*[0-9]'
        then
            # We have a line which is not empty, show current chain
            # Replace "Chain ..." header line with "IPv4/6 Chain"
            run_ipt_nomatch "$IPT$IPT_NUMERIC" "$CURRENT_CHAIN" | \
                sed 's/^\(Chain \)/'"${PREFIX}"' \1/' | \
                if "$SHORT_OUTPUT"
                then
                    # Remove second header line
                    sed '2{/^ *[^0-9]/d}'
                else
                    # Add a blank line at the end
                    cat
                    echo ""
                fi
            CURRENT_CHAIN=""
        fi
    done
    return
}

while getopts ":dhs46" OPT
do
    case "$OPT" in
        h)
            echo "Usage: $0 [OPTION]"
            echo "Display some iptables statistics"
            echo ""
            echo "Options:"
            echo "  -d       use DNS, don't use --numeric option in iptables"
            echo "  -h       display this help and exit"
            echo "  -s       make the output as short as possible"
            echo "  -4       only run iptables"
            echo "  -6       only run ip6tables"
            exit
            ;;
        d)
            IPT_NUMERIC=""
            ;;
        s)
            SHORT_OUTPUT='true'
            ;;
        4)
            RUN_IP4='true'
            RUN_IP6='false'
            ;;
        6)
            RUN_IP6='true'
            RUN_IP4='false'
            ;;
        \?)
            printf >&2 "%s: invalid option '%s'"\\n "$0" "$OPTARG"
            echo >&2 "Try '$0 -h' for more information."
            exit 1
            ;;
    esac
done

if "$RUN_IP4"
then
    if ! command -v iptables > /dev/null 2>&1
    then
        echo >&2 "Unable to find iptables."
        exit 1
    fi
    ipt_stats IPv4 iptables || exit $?
fi

if "$RUN_IP6"
then
    if ! command -v ip6tables > /dev/null 2>&1
    then
        echo >&2 "Unable to find ip6tables."
        exit 1
    fi
    ipt_stats IPv6 ip6tables || exit $?
fi
