#!/bin/sh
# SPDX-License-Identifier: MIT
#
# Copyright (c) 2022-2025 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Enter the network namespace of a Podman container
#
# Optionally register a network namespace (netns) with 'ip netns' command. This
# enables using 'ip netns identify' to get the name of the current container
# through its network namespace.

set -eu

REGISTER_IPNETNS=false

while getopts ":hr" OPT
do
    case "$OPT" in
        h)
            echo "Usage: $0 [OPTIONS] CONTAINER [ARGS]"
            echo "Enter the network namespace of a Podman container."
            echo "CONTAINER can be the container ID or name."
            echo ""
            echo "Options:"
            echo "  -h       display this help and exit"
            echo "  -r       register a 'ip netns' namespace named like the container"
            exit
            ;;
        r)
            REGISTER_IPNETNS=true
            ;;
        \?)
            printf >&2 "%s: invalid option '%s'"\\n "$0" "$OPTARG"
            echo >&2 "Try '$0 -h' for more information."
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))

if [ $# -lt 1 ]
then
    echo >&2 "Usage: $0 [OPTIONS] CONTAINER [ARGS]"
    exit 1
fi

CURRENT_USER="$(id -nu)"

# Grab the container PID using the ID or name
CONTAINER_PID="$(podman inspect -t container "$1" -f '{{.State.Pid}}' | grep '^[0-9]\+$' || :)"
if [ -z "$CONTAINER_PID" ] ; then
    echo >&2 "Error: unable to get the PID of container $1"
    exit
fi

# Register the network namespace
if "$REGISTER_IPNETNS" ; then
    CURRENT_NETNS_NAME="$(ip netns identify "$CONTAINER_PID")"
    if [ -n "$CURRENT_NETNS_NAME" ] ; then
        # Do no register the network namespace twice
        :
    else
        NETNS_NAME="$(podman inspect -t container "$1" -f '{{.Name}}')"
        if [ -z "$NETNS_NAME" ] ; then
            echo >&2 "Error: unable to get the name of container $1"
            exit
        fi

        while [ -e "/run/netns/$NETNS_NAME" ] ; do
            # A network namespace is already registers with the same name.
            # If it is empty, take it over, as is can be a remnant of a previous container.
            NETNS_PIDS="$(ip netns pids "$NETNS_NAME")"
            if [ -z "$NETNS_PIDS" ] ; then
                echo >&2 "Removing empty netns $NETNS_NAME"
                if [ "$CURRENT_USER" = root ] ; then
                    ip netns delete "$NETNS_NAME"
                else
                    sudo ip netns delete "$NETNS_NAME"
                fi
                break
            fi
            # Add an underscore to create a unique name
            echo >&2 "Netns $NETNS_NAME is already in use, mutate the name"
            NETNS_NAME="${NETNS_NAME}_"
        done

        echo >&2 "Registering netns $NETNS_NAME"
        if [ "$CURRENT_USER" = root ] ; then
            ip netns attach "$NETNS_NAME" "$CONTAINER_PID"
        else
            sudo ip netns attach "$NETNS_NAME" "$CONTAINER_PID"
        fi
    fi
fi

# Get the following arguments
shift

# Use the current shell by default
if [ $# -eq 0 ] ; then
    set -- "${SHELL:-sh}"
fi

if [ "$CURRENT_USER" = root ] ; then
    # Directly run nsenter
    exec nsenter --net --target "$CONTAINER_PID" -- "$@"
else
    # Use sudo to switch users
    exec sudo nsenter --net --target "$CONTAINER_PID" sudo -u niooss -s -- "$@"
fi
echo >&2 "Error: unable to enter the network namespace of $CONTAINER_PID"
exit 1
