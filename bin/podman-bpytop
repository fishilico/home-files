#!/bin/bash
# SPDX-License-Identifier: MIT
#
# Copyright (c) 2020-2022 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Run https://github.com/aristocratos/bpytop in a podman container
#
# cf. https://twitter.com/HB9FXQ/status/1320114147691057155
# and https://www.linuxtricks.fr/news/10-logiciels-libres/479-bpytop-un-moniteur-systeme-en-python-tres-reactif-et-qui-claque/

set -e

build_container() {
    # Update the base image
    mapfile -t OLD_BASE_IMAGES < <(podman image list '--format={{.Id}}' docker.io/library/python:3.9-alpine)
    podman pull docker.io/library/python:3.9-alpine
    for OLD_BASE_IMAGE in "${OLD_BASE_IMAGES[@]}" ; do
        if [ "$(podman image list '--format={{.Dangling}}' --filter "id=${OLD_BASE_IMAGE}")" = 'true' ] ; then
            echo "Removing old podman base image ${OLD_BASE_IMAGE}"
            podman image rm -- "${OLD_BASE_IMAGE}"
        fi
    done

    # Build a container that runs bpytop, using the procfs instance mounted on /hostproc
    podman build --no-cache -t localhost/podman-bpytop -f /dev/stdin << EOF
FROM docker.io/library/python:3.9-alpine
RUN apk --no-cache --update add gcc linux-headers musl-dev && \
    rm -rf /var/cache/apk/* && \
    pip3 install bpytop && \
    adduser -D user && \
    echo 'import psutil' > /run-bpytop.py && \
    echo 'psutil.PROCFS_PATH="/hostproc"' >> /run-bpytop.py && \
    echo 'import bpytop' >> /run-bpytop.py && \
    echo 'bpytop.main()' >> /run-bpytop.py
EOF

}

# Option --update updates the container if it already exists
if [ $# -ge 1 ] && [ "$1" = '--update' ] ; then
    shift
    mapfile -t OLD_IMAGES < <(podman image list '--format={{.Id}}' localhost/podman-bpytop)
    build_container
    for OLD_IMAGE in "${OLD_IMAGES[@]}" ; do
        if [ "$(podman image list '--format={{.Dangling}}' --filter "id=${OLD_IMAGE}")" = 'true' ] ; then
            echo "Removing old podman image ${OLD_IMAGE}"
            podman image rm -- "${OLD_IMAGE}"
        fi
    done
elif ! podman image exists localhost/podman-bpytop ; then
    build_container
fi

# Option --no-start can be used to build the container without starting it
if [ $# -ge 1 ] && [ "$1" = '--no-start' ] ; then
    exit
fi

# Use SCMP_ACT_LOG to record the denied syscalls
SECCOMP_PROFILE='
{
    "defaultAction": "SCMP_ACT_ERRNO",
    "syscalls": [
        {
            "names": [
                "arch_prctl",
                "bind",
                "brk",
                "capget",
                "capset",
                "chdir",
                "clone",
                "close",
                "connect",
                "dup",
                "dup2",
                "epoll_create1",
                "epoll_ctl",
                "epoll_pwait",
                "execve",
                "exit",
                "exit_group",
                "fchown",
                "fcntl",
                "fork",
                "fstat",
                "fstatfs",
                "futex",
                "getcwd",
                "getdents64",
                "getegid",
                "geteuid",
                "getgid",
                "getpeername",
                "getpid",
                "getppid",
                "getrandom",
                "getsockname",
                "getsockopt",
                "gettid",
                "getuid",
                "ioctl",
                "lseek",
                "lstat",
                "madvise",
                "membarrier",
                "mkdir",
                "mmap",
                "mprotect",
                "munmap",
                "nanosleep",
                "newfstatat",
                "open",
                "openat",
                "pipe2",
                "poll",
                "prctl",
                "pselect6",
                "read",
                "readlink",
                "readv",
                "recvfrom",
                "rt_sigaction",
                "rt_sigprocmask",
                "rt_sigreturn",
                "sched_getaffinity",
                "select",
                "sendfile",
                "sendto",
                "setgid",
                "setgroups",
                "setresgid",
                "setresuid",
                "setsockopt",
                "set_tid_address",
                "setuid",
                "socket",
                "stat",
                "statfs",
                "sysinfo",
                "tgkill",
                "uname",
                "wait4",
                "write"
            ],
            "action": "SCMP_ACT_ALLOW"
        }
    ]
}'

exec podman run --rm \
    --net=host \
    --volume /proc:/hostproc:ro \
    --security-opt seccomp=<(printf %s "$SECCOMP_PROFILE") \
    -ti localhost/podman-bpytop su user -c "python3 /run-bpytop.py"
