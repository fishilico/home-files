#!/bin/sh
# Issue a ping6 command on a local target
# This local target can be given by IPv6 link-local, MAC or IPv4 address

# Convert something to an IPv6 link-local address, whenever possible
param_to_ip6ll() {
    local IP4_PATTERN IP6_PATTERN IP6LL_PATTERN MAC_PATTERN OUT

    # These patterns are not strict at all but just allow to differentiate
    # between several kind of parameters
    IP4_PATTERN='^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'
    IP6_PATTERN='^[0-9a-fA-F:]{3,39}$'
    IP6LL_PATTERN='^fe80::[0-9a-fA-F:]{7,19}%\S+$'
    MAC_PATTERN='^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$'

    if echo $1 | grep -qE "$IP4_PATTERN"
    then
        ip4_to_ip6ll $1
    elif echo $1 | grep -qE "$MAC_PATTERN"
    then
        mac_to_ip6ll $1
    elif echo $1 | grep -qE "$IP6_PATTERN"
    then
        ip6glob_to_ip6ll $1
    elif echo $1 | grep -qE "$IP6LL_PATTERN"
    then
        echo $1
    else
        # Maybe a domain name? Use nsswitch!
        OUT=$(getent hosts $1 | sed -n '1s/^\s*\(\S\+\)\s.*/\1/p')
        if [ -z "$OUT" ]
        then
            return 1
        elif echo $OUT | grep -qE "$IP4_PATTERN"
        then
            echo >&2 "IPv4 $OUT"
            ip4_to_ip6ll $OUT
        elif echo $OUT | grep -qE "$IP6_PATTERN"
        then
            echo >&2 "IPv6 $OUT"
            ip6glob_to_ip6ll $OUT
        else
            echo >&2 "Unknown host format of $OUT"
            return 1
        fi
    fi
}

# Convert an IPv4 address to a (MAC, interface) tuple and
# compute an IPv6 link-local address
ip4_to_ip6ll() {
    local IFACE MAC OUT
    if which ip > /dev/null 2>&1
    then
        # Use ip command
        OUT=$(ip neigh show $1)
        MAC=$(echo $OUT | sed -n 's/.*lladdr \([0-9a-fA-F:]\{17\}\).*/\1/p')
        IFACE=$(echo $OUT | sed -n 's/.*dev \([^ ]\+\).*/\1/p')
    elif which arp > /dev/null 2>&1
    then
        # Use arp command
        OUT=$(arp -n $1 | sed '1d')
        MAC=$(echo $OUT | sed -n 's/.*ether \+\([0-9a-fA-F:]\{17\}\).*/\1/p')
        IFACE=$(echo $OUT | sed -n 's/.* \([^ ]\+\)\s*$/\1/p')
    else
        echo >&2 "No ip nor arp command found"
        return 1
    fi
    if [ -z "$MAC" ]
    then
        echo >&2 "No MAC address found for $1"
        return 1
    fi
    echo >&2 "MAC address $MAC on interface $IFACE"
    mac_to_ip6ll $MAC $IFACE
}

# Convert an IPv6 global address to a (MAC, interface) tuple and
# compute an IPv6 link-local address
ip6glob_to_ip6ll() {
    local DEV IFACE OUT
    OUT=$(ip -6 neigh show $1)
    MAC=$(echo $OUT | sed -n 's/.*lladdr \([0-9a-fA-F:]\{17\}\).*/\1/p')
    IFACE=$(echo $OUT | sed -n 's/.*dev \([^ ]\+\).*/\1/p')
    if [ -z "$MAC" ]
    then
        echo >&2 "No MAC address found for $1"
        return 1
    fi
    echo >&2 "MAC address $MAC on interface $IFACE"
    mac_to_ip6ll $MAC $IFACE
}

# Convert a MAC address to an IPv6 link-local address
mac_to_ip6ll() {
    local FIRST H2 SECOND TAIL
    FIRST=$(echo $1 | sed -n 's/^\([0-9a-fA-F]\).:.*/\1/p')
    SECOND=$(echo $1 | sed -n 's/^.\([0-9a-fA-F]\):.*/\1/p')
    H2='\([0-9a-fA-F]\{2\}\)'
    TAIL=$(echo $1 | sed -n "s/^..:$H2:$H2:$H2:$H2:$H2\$/\1:\2ff:fe\3:\4\5/p")

    if [ -z "FIRST" -o -z "$SECOND" -o -z "$TAIL" ]
    then
        echo >&2 "Invalid MAC address $1"
        return 1
    fi

    # Set the universal bit in the second hexdigit
    SECOND=$(echo $SECOND | tr '014589cdCD' '2367abefEF')
    if [ $# -ge 2 ]
    then
        ip6_to_ip6ll "fe80::$FIRST$SECOND$TAIL" $2
    else
        ip6_to_ip6ll "fe80::$FIRST$SECOND$TAIL"
    fi
}

# Add an interface scope to an IPv6 address, in needed
ip6_to_ip6ll() {
    local IFACE
    if [ $# -ge 2 -a -n "$2" ]
    then
        # Use $2 as interface
        echo "$1%$2"
        return
    fi

    # Try to find an interface with ip
    IFACE=$(ip neigh show "$1" | sed -n 's/.*dev \([^ ]\+\).*/\1/p')
    if [ -n "$IFACE" ]
    then
        echo "$1%$IFACE"
        return
    fi
    echo $1
}

# Extract options as $OPTIONS $TARGET "$@"
OPTIONS=""
while getopts ":aAbBdc:Dfhi:I:l:Lm:M:nN:Op:qQ:rRs:S:t:T:UvVw:W:" OPT
do
    case "$OPT" in
        \?)
            echo >&2 "Warning: unknown option -$OPTARG"
            OPTIONS="$OPTIONS -$OPTARG"
            ;;
        *)
            OPTIONS="$OPTIONS -$OPT $OPTARG"
            ;;
    esac
done
shift $((OPTIND-1))
if [ $# -lt 1 ]
then
    echo "Usage: ping6-local [options] destination"
    echo "Issue a ping6 call to a link-local destination"
    echo "options are the same as the ping6 command"
    exit
fi

DEST=$(param_to_ip6ll $1)
if [ -z "$DEST" ]
then
    echo >&2 "Invalid destination: $1"
    exit 1
fi
shift

# Let's try ndisc6 before ping6
if which ndisc6 > /dev/null 2>&1
then
    echo -n 'NDISC6 '
    if ! ndisc6 $(echo $DEST | tr '%' ' ')
    then
        echo >&2 "ndisc6 failed!"
        exit 1
    fi
fi
exec ping6 $OPTIONS $DEST "$@"
