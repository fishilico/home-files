#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2015-2017 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Scan private address ranges of IPv4

@author: Nicolas Iooss
@license: MIT
"""
import argparse
import subprocess
import sys


NET_IF = 'eth0'


def scan_arp(ip):
    cmdline = ['arping', '-c1', '-DI', NET_IF, ip]
    p = subprocess.Popen(cmdline, stdout=subprocess.PIPE)
    retval = p.wait()
    out = p.communicate()[0].decode('ascii', errors='ignore').strip()
    if retval:
        print("{} failed with status code {}".format(cmdline[0], retval))
        return False
    if 'Received 0 response' in out:
        return True
    print('{} is present'.format(ip))
    return True


def scan_prefix16(prefix):
    for ip3 in range(256):
        sys.stdout.write('Scanning {}.{}.0/24...\r'.format(prefix, ip3))
        for ip4 in range(254):
            if not scan_arp('{}.{}.{}'.format(prefix, ip3, ip4)):
                return False
    return True


def scan_ip4priv(range_id=None):
    """Run a callback with ranges from a private IPv4 address range"""
    if range_id is None or range_id == 0:
        for ip2 in range(256):
            if not scan_prefix16('10.{}'.format(ip2)):
                return False
    if range_id is None or range_id == 1:
        for ip2 in range(16, 32):
            if not scan_prefix16('172.{}'.format(ip2)):
                return False
    if range_id is None or range_id == 2:
        if not scan_prefix16('192.168'):
            return False
    return True


def main(argv=None):
    global NET_IF

    parser = argparse.ArgumentParser(
        description="Scan private address ranges of IPv4")
    parser.add_argument('-i', '--interface', type=str,
                        help="Interface to send packets from")
    parser.add_argument('-r', '--range', type=int,
                        help="select range (0=10/8, 1=172.16/12, 2=192.168/16")
    args = parser.parse_args(argv)
    if args.interface is not None:
        NET_IF = args.interface
    if not scan_ip4priv(args.range):
        return 1
    return 0


if __name__ == '__main__':
    sys.exit(main())
