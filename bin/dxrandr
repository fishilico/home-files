#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Copyright (c) 2015-2020 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Default XRandR -- Reset XRandR configuration to a known state

Inspired by unxrandr code (from ARandR)

@author: Nicolas Iooss
@license: MIT
"""
import argparse
import sys

# Use ARandR screenlayout python library
import screenlayout.auxiliary
import screenlayout.xrandr


def get_primary_width_name(xrandr):
    """Retrieve the width and name of a screen which is considered primary

    The primary screen is the first connected screen with either:
    * LVDS (Low-Voltage Differential Signalling) interface
    * eDP (embedded DisplayPort) interface
    """
    for name in xrandr.outputs:
        if not xrandr.configuration.outputs[name].active:
            continue
        state = xrandr.state.outputs[name]
        if not state.connected:
            continue
        if name.upper().startswith('LVDS') or name.startswith('eDP'):
            return (state.modes[0].width, name)
    return (0, '')


def get_common_resolution(xrandr):
    """Get the maximal resolution which is shared by all screens"""
    common_resolutions = None
    for name in xrandr.outputs:
        if not xrandr.configuration.outputs[name].active:
            continue
        state = xrandr.state.outputs[name]
        if not state.connected:
            continue
        width_height_pairs = set((m[0], m[1]) for m in state.modes)
        if common_resolutions is None:
            common_resolutions = width_height_pairs
        else:
            common_resolutions &= width_height_pairs
    if not common_resolutions:
        print("Error: unable to find a common resolution", file=sys.stderr)
        return None
    return max(common_resolutions)


def main(argv=None):
    parser = argparse.ArgumentParser(description="Reset XRandR configuration to a known state")
    parser.add_argument('-s', '--same', action='store_true',
                        help="superpose all screens as the same virtual screen")
    args = parser.parse_args(argv)

    xrandr = screenlayout.xrandr.XRandR()
    xrandr.load_from_x()
    if args.same:
        common_mode = get_common_resolution(xrandr)
        primary_name = None
        print("Using common resolution {0[0]}x{0[1]}".format(common_mode))
    else:
        primary_width, primary_name = get_primary_width_name(xrandr)
        common_mode = None

    has_change = False
    for name in xrandr.outputs:
        state = xrandr.state.outputs[name]
        config = xrandr.configuration.outputs[name]

        # If output is not connected, ensure it is deactivated
        if not state.connected:
            if config.active and not state.connected:
                print("Output {} is active but disconnected. Deactivate!".format(name))
                config.active = False
                has_change = True
            continue

        # normal X position
        is_screen_primary = primary_name is None or name == primary_name
        pos_x = 0 if is_screen_primary else primary_width

        if not config.active:
            print("Output {} is connected but not active. Activate!".format(name))
            config.active = True
            config.position = screenlayout.auxiliary.Position((pos_x, 0))
            config.mode = state.modes[0]
            config.rotation = screenlayout.auxiliary.NORMAL
            has_change = True

        if is_screen_primary:
            if config.position.left != 0 or config.position.top != 0:
                print("Output {} is primary but not top-left. Move!".format(name))
                config.position = screenlayout.auxiliary.Position((0, 0))
                has_change = True
        else:
            if config.position.left != pos_x and config.position.top == 0:
                print("Output {} is not primary. Move !".format(name))
                config.position = screenlayout.auxiliary.Position((pos_x, 0))
                has_change = True

        if common_mode is None:
            best_mode = state.modes[0]
            if list(config.mode) < list(best_mode):
                print("Output {} has not maximal size. Maximize!".format(name))
                config.mode = best_mode
                has_change = True
        else:
            if tuple(config.mode) != common_mode:
                chosen_modes = [m for m in state.modes if tuple(m) == common_mode]
                if not chosen_modes:
                    print("Warning: Output {} has not common mode".format(name))
                else:
                    print("Output {} has not common resolution. Resize!".format(name))
                    config.mode = chosen_modes[0]
                    has_change = True

        if hasattr(config, 'rotation') and config.rotation.angle:
            print("Output {} is rotated. Rotate it back to normal".format(name))
            config.rotation = screenlayout.auxiliary.NORMAL
            has_change = True

    if has_change:
        print("Apply new configuration")
        print(xrandr.save_to_shellscript_string(["%(xrandr)s"]).strip())
        xrandr.save_to_x()


if __name__ == '__main__':
    main()
