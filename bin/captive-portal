#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Copyright (c) 2015-2021 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Figure out whether the web access is currently filtered by a captive portal

In order to detect whether a captive portal is present, an HTTP request can be
performed to one of the following URL:

* http://www.google.com/ (in order to detect the redirection to HTTPS)
* http://captive.apple.com/hotspot-detect.html (used by Apple iOS)
* http://connectivitycheck.gstatic.com/generate_204 (used by Google Android)
* http://detectportal.firefox.com/success.txt (used by Mozilla Firefox)
* http://neverssl.com/
* http://www.msftconnecttest.com/connecttest.txt (used by Microsoft Windows)

@author: Nicolas Iooss
@license: MIT
"""
import argparse
from configparser import ConfigParser
import http.client
import os
import os.path
import re
import socket
import subprocess
import urllib.parse
import urllib.request
import webbrowser


DEFAULT_DOMAIN = 'www.google.com'
# Example of settings files (encrypted with gpg):
# [SFRWifi]
# username=example@sfr.fr
# password=********
ENC_SETTINGS = os.path.expanduser('~/.captiveportal.gpg')


def read_enc_settings():
    """Read the encrypted settings"""
    print("Decrypting {}".format(ENC_SETTINGS))
    try:
        output = subprocess.check_output(['gpg', '-d', ENC_SETTINGS])
    except subprocess.SubprocessError:
        print("Decryption failed, ignoring")
        return
    config = ConfigParser()
    config.read_string(output.decode('utf8', errors='ignore'))
    return config


class NoRedirect(urllib.request.HTTPRedirectHandler):
    """Perform HTTP requests without following HTTP redirects"""
    def redirect_request(self, req, fp, code, msg, hdrs, newurl):
        pass


def handle_sfrwifi(redirurl):
    """Handle authentication to SFR Wifi hotspot"""
    print("SFR Wifi captive portal detected. Attempting authentication")

    urlinfos = urllib.parse.urlparse(redirurl)
    urlqs = urllib.parse.parse_qs(urlinfos.query)

    # Grab the settings
    settings = read_enc_settings()
    if settings is None:
        return False
    username = settings['SFRWifi']['username']
    password = settings['SFRWifi']['password']

    # Fill the submission form
    form = {
        'username': username,
        'password': password,
        'conditions': 1,
        'challenge': urlqs['challenge'][0],
        'username2': username,
        'accessType': 'neuf',
        'lang': 'fr',
        'mode': urlqs['mode'][0],  # 3 by default
        'userurl': urlqs['userurl'][0],  # 'http://www.google.com' ?
        'uamip': urlqs['uamip'][0],  # 192.168.2.1 by default
        'uamport': urlqs['uamport'][0],  # 3990 by default
        'channel': urlqs['channel'][0],  # 0 by default
        'mac': urlqs['mac'][0],
        'connextion': 'CONNEXION',
    }
    qdata = urllib.parse.urlencode(form).encode('utf-8')

    # Post the result
    urlf = urllib.request.urlopen(
        'https://hotspot.wifi.sfr.fr/nb4_crypt.php',
        data=qdata)
    response = urlf.read().decode('utf-8', 'ignore')

    # The response should be a JS redirect
    matches = re.search(r'window\.location = "([^"]+)"', response)
    if matches is None:
        print("Unable to find javascript redirect in response:")
        print(repr(response))
        return False
    newurl = matches.group(1)

    print("Redirecting to {}".format(newurl))
    noredir_opener = urllib.request.build_opener(NoRedirect())
    urllib.request.install_opener(noredir_opener)
    try:
        urllib.request.urlopen(newurl)
    except urllib.error.HTTPError as exc:
        # Forward the error code when it is not "HTTP Moved Temporary"
        if exc.code != 302:
            raise

        newurl = exc.headers['Location']
        if newurl.startswith('https://hotspot.wifi.sfr.fr/indexEncryptingChilli.php?res=success&'):
            print("Successfully authenticated :)")
            return True
        if newurl.startswith('https://hotspot.wifi.sfr.fr/indexEncryptingChilli.php?res=failed&'):
            print("Authentication failed :(")
            return False
        print("Redirecting to unknown URL: {}".format(newurl))
        return False

    print("The connection protocol did not end gracefully.")
    return False


def main(argv=None):
    parser = argparse.ArgumentParser(
        description="Test web connectivity and find captive portal")
    parser.add_argument('-d', '--domain',
                        help="domain to be tested for reachability")
    parser.add_argument('-n', '--no-browser', action='store_true',
                        help="never open a web browser")
    parser.add_argument('-s', '--show-headers', action='store_true',
                        help="display HTTP headers of the redirect")
    args = parser.parse_args(argv)

    domain = args.domain or DEFAULT_DOMAIN
    if domain.lower().startswith('http://'):
        domain = domain[len('http://'):]
    domain = domain.split('/', 1)[0]
    conn = http.client.HTTPConnection(domain)
    try:
        # Do not use HEAD as some captive portal implementation (like iciwifi.com)
        # forward HEAD requests
        conn.request('GET', '/')
    except socket.gaierror as exc:
        # socket.getaddrinfo() failed in HTTP client
        print("Socket error in the initial HTTP request: {} (errno {})".format(
            exc.strerror, exc.errno))
        return 1
    resp = conn.getresponse()
    conn.close()

    # If status if OK or it is a redirect to a Google website, it's fine.
    # When there is no location header, resp.headers['location'] is None.
    # Make it an empty string instead.
    if resp.status // 100 == 2 or '//www.google.' in (resp.headers['location'] or ''):
        print("The web is reachable.")
        return 0

    # HTTP redirect status:
    # * 302 Found
    # * 307 Temporary Redirect
    if resp.status not in (302, 307):
        print("Expected HTTP 302 or 307 status, not {} {}".format(
            resp.status, resp.reason))
        return 1

    redirurl = resp.headers['location']
    print("Captive portal: {}".format(redirurl))

    if args.show_headers:
        print("HTTP headers other than location:")
        for key, value in resp.headers.items():
            if key.lower() != 'location':
                print("  {}: {}".format(key, value))

    if redirurl.startswith('https://hotspot.wifi.sfr.fr/indexEncryptingChilli.php'):
        if handle_sfrwifi(redirurl):
            return 0

    # Open a web browser with the redirected URL
    if not args.no_browser:
        webbrowser.open(redirurl)
    return 0


if __name__ == '__main__':
    import sys
    sys.exit(main())
