#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Get the VSOCK CID of the current machine (host or guest virtual machine)

Issue ioctl IOCTL_VM_SOCKETS_GET_LOCAL_CID to /dev/vsock to read the CID (32-bit
Context Identifier).

The device exists if:

- The kernel is build with CONFIG_VSOCKETS (since Linux 3.9)
- The kernel module is loaded: modprobe vsock
  - The host machine uses module vsock_host to register the host CID 2.
  - A guest virtual machine can use module vmw_vsock_virtio_transport to use VSOCK.

Documentation: https://man7.org/linux/man-pages/man7/vsock.7.html

This is useful to be able to SSH from the host with:

    ssh user@vsock/${CID}

This uses systemd-ssh-proxy to establish a VSOCK socket to the given CID on port 22:
https://www.freedesktop.org/software/systemd/man/257/systemd-ssh-proxy.html

This is possible since systemd 256: https://github.com/systemd/systemd/pull/30777
("ssh-generator which makes VMs and containers accessible to ssh via AF_UNIX and AF_VSOCK").

This also automatically creates a socket for OpenSSH server in
/run/systemd/generator/sshd-vsock.socket using
https://www.freedesktop.org/software/systemd/man/257/systemd-ssh-generator.html

    # Automatically generated by systemd-ssh-generator

    [Unit]
    Description=OpenSSH Server Socket (systemd-ssh-generator, AF_VSOCK)
    Documentation=man:systemd-ssh-generator(8)
    Wants=ssh-access.target
    Before=ssh-access.target

    [Socket]
    ListenStream=vsock::22
    Accept=yes
    PollLimitIntervalSec=30s
    PollLimitBurst=50

In a virtual machine this can be seen with ss:

    $ ss -an --vsock
    sudo ss -anp --vsock
    Netid State  Recv-Q Send-Q Local Address:Port Peer Address:Port Process
    v_str LISTEN 0      0      *:22               *:*               users:(("systemd",pid=1,fd=102))

When the virtual machine is launched with a VSOCK interface in libvirt:

    <vsock model="virtio">
      <cid auto="yes" address="3"/>
      <alias name="vsock0"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x06" function="0x0"/>
    </vsock>

... the SSH server of the guest VM is reachable from the host even without network connectivity.

Linux defined in include/uapi/linux/vm_sockets.h :

- CID 0 as the hypervisor (VMADDR_CID_HYPERVISOR = 0)
- CID 1 as the loopback (VMADDR_CID_LOCAL = 1)
- CID 2 as the host (VMADDR_CID_HOST 2

This means "ssh vsock/1" connects to the local SSH server through the VSOCK loopback.

@author: Nicolas Iooss
@license: MIT
"""
import ctypes
import fcntl
import os
import sys


# This ioctl was introduced in
# https://web.git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d021c344051af91f42c5ba9fdedc176740cbd238
#     #define IOCTL_VM_SOCKETS_GET_LOCAL_CID _IO(7, 0xb9)
#       #define _IO(type,nr) _IOC(_IOC_NONE,(type),(nr),0)
#         #define _IOC_NONE 0U
#         #define _IOC(dir,type,nr,size) \
#             (((dir)  << _IOC_DIRSHIFT) | \
#             ((type) << _IOC_TYPESHIFT) | \
#             ((nr)   << _IOC_NRSHIFT) | \
#             ((size) << _IOC_SIZESHIFT))
#
# So the ioctl is: (0 << 30) | (7 << 8) | (0xb9 << 0) | (0 << 16) = 0x7b9
IOCTL_VM_SOCKETS_GET_LOCAL_CID = 0x7b9


def get_vsock_cid():
    """Use ioctl IOCTL_VM_SOCKETS_GET_LOCAL_CID to get the CID of the local machine

    This ioctl was introduced in
    https://web.git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d021c344051af91f42c5ba9fdedc176740cbd238
        #define IOCTL_VM_SOCKETS_GET_LOCAL_CID _IO(7, 0xb9)
          #define _IO(type,nr) _IOC(_IOC_NONE,(type),(nr),0)
            #define _IOC_NONE 0U
            #define _IOC(dir,type,nr,size) \
                (((dir)  << _IOC_DIRSHIFT) | \
                ((type) << _IOC_TYPESHIFT) | \
                ((nr)   << _IOC_NRSHIFT) | \
                ((size) << _IOC_SIZESHIFT))

        So the ioctl is: (0 << 30) | (7 << 8) | (0xb9 << 0) | (0 << 16) = 0x7b9
    """
    cid = ctypes.c_uint(0)
    assert ctypes.sizeof(cid) == 4
    try:
        fd = os.open("/dev/vsock", 0)
    except FileNotFoundError:
        print("Error: /dev/vsock does not exist (modprobe vsock)", file=sys.stderr)
        sys.exit(1)
    try:
        fcntl.ioctl(fd, IOCTL_VM_SOCKETS_GET_LOCAL_CID, cid)
    finally:
        os.close(fd)
    return cid.value


if __name__ == "__main__":
    cid = get_vsock_cid()
    if cid == 0xffffffff:
        # This occurs in a VM when no VSOCK interface was set up.
        print("Local VSOCK CID: -1 = VMADDR_CID_ANY (no CID attributed)")
    elif cid == 2:
        print("Local VSOCK CID: 2 = VMADDR_CID_HOST")
    else:
        print("Local VSOCK CID: {}".format(cid))
