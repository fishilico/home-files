#!/usr/bin/env python
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Copyright (c) 2015-2020 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""List the programs with SUID bit or capabilities that are on the system

This program is compatible with Python 2.6, 2.7 and 3.x

By the way, here are some commands to get a root shell on Linux systems:
* su (using the root password)
* sudo -s (using the user password or the root one)
* gksu and gksudo (graphical front-ends for su and sudo)
* pkexec sh (using root password, with policy kit)
* machinectl shell (using root password, since systemd 225)
* docker run --rm -v /:/host -ti busybox chroot /host

@author: Nicolas Iooss
@license: MIT
"""
import optparse
import errno
import ctypes
import grp
import logging
import pwd
import os
import os.path
import re
import stat
import sys


# pylint: disable=invalid-name
logger = logging.getLogger(__name__)


def pathdesc_to_regexp(pathdesc):
    """Compile a given file path description into a regular expression

    The given description is a regexp pattern which begins with / and where dot
    really means the dot character (no need to escape it).
    ^(/usr)? is automatically prepended so that /usr/bin behaves the same as
    /bin, /usr/lib as /lib, etc.
    """
    assert pathdesc[0] == '/'
    assert not pathdesc.startswith('/usr')
    assert '\\.' not in pathdesc
    return re.compile(r'^(/usr)?' + pathdesc.replace('.', '\\.') + r'$')


# Here are some types to express ourselves when defining the hard-coded list
# of special files

class SuidFile(object):
    """SUID (or SGID) regular executable file

    Matches a path to a regular file (realpath = path) against a given pattern.

    It also matches the owner of the file, against "root" by default but it can
    be a set of users.
    """
    # pylint: disable=too-few-public-methods
    def __init__(self, filepattern, owners=None, groups=None):
        self.filepattern = pathdesc_to_regexp(filepattern)
        if owners is None and groups is None:
            # root-suid file by default
            owners = ('root', )
        self.owners = owners
        self.groups = groups

    def is_match(self, path, realpath, owner, group):
        """Does the given path which resolve to realpath matches the file?

        Return True if all the following conditions are verified:
        * the file is not a symlink,
        * the path matches the given pattern
        * the file is not a SUID-file, or it is and the owner is known
        * the file is not a SGID-file, or it is and the group is known
        """
        return (
            path == realpath and
            self.filepattern.match(path) and
            (owner is None or
                (self.owners is not None and owner in self.owners)) and
            (group is None or
                (self.groups is not None and group in self.groups)))


class LinkToSuidFile(object):
    """Symbolic link to a SUID executable file

    See SuidFile description.
    """
    # pylint: disable=too-few-public-methods
    def __init__(self, linkpattern, targetpattern, owners=None, groups=None):
        self.linkpattern = pathdesc_to_regexp(linkpattern)
        self.targetpattern = pathdesc_to_regexp(targetpattern)
        if owners is None and groups is None:
            owners = ('root', )
        self.owners = owners
        self.groups = groups

    def is_match(self, path, realpath, owner, group):
        """Perform the matching"""
        return (
            self.linkpattern.match(path) and
            self.targetpattern.match(realpath) and
            (owner is None or
                (self.owners is not None and owner in self.owners)) and
            (group is None or
                (self.groups is not None and group in self.groups)))


class CapsFile(object):
    """File with capability attributes"""
    # pylint: disable=too-few-public-methods
    def __init__(self, filepattern, caps):
        self.filepattern = pathdesc_to_regexp(filepattern)
        self.caps = caps

    def is_match(self, path, realpath, caps):
        """Does the given path which resolve to realpath matches the file?"""
        return (
            path == realpath and
            self.filepattern.match(path) and
            self.caps == caps)


class LinkToCapsFile(object):
    """Symbolic link to a file with capability attributes"""
    # pylint: disable=too-few-public-methods
    def __init__(self, linkpattern, targetpattern, caps):
        self.linkpattern = pathdesc_to_regexp(linkpattern)
        self.targetpattern = pathdesc_to_regexp(targetpattern)
        self.caps = caps

    def is_match(self, path, realpath, caps):
        """Perform the matching"""
        return (
            self.linkpattern.match(path) and
            self.targetpattern.match(realpath) and
            self.caps == caps)


# Define here known and fully trusted SUID programs.
# These programs are usually installed on regular systems.
# For each project, an URL to the project is given with an URL to online file
# tree, is available.
TRUSTED_SUID_FILES = [
    # abrt-addon-ccpp, https://abrt.readthedocs.org/en/latest/
    # https://github.com/abrt/abrt
    SuidFile('/libexec/abrt-action-install-debuginfo-to-abrt-cache',
             owners=('abrt', ), groups=('abrt', )),

    # apache, http://httpd.apache.org/docs/trunk/suexec.html
    # http://svn.apache.org/repos/asf/httpd/httpd/
    SuidFile('/s?bin/suexec'),

    # at, https://packages.qa.debian.org/a/at.html
    # https://anonscm.debian.org/cgit/collab-maint/at.git/tree/
    SuidFile('/bin/at', owners=('daemon', 'root'), groups=('daemon', )),
    LinkToSuidFile('/bin/atq', '/bin/at', owners=('daemon', 'root'),
                   groups=('daemon', )),
    LinkToSuidFile('/bin/atrm', '/bin/at', owners=('daemon', 'root'),
                   groups=('daemon', )),

    # bubblewrap, https://www.projectatomic.io/blog/2017/07/unprivileged-containers-with-bwrap-oci-and-bubblewrap/
    # https://github.com/projectatomic/bubblewrap
    SuidFile('/bin/bwrap'),

    # busybox-suid, https://pkgs.alpinelinux.org/package/main/x86_64/busybox-suid
    # http://git.alpinelinux.org/cgit/aports/tree/main/busybox/bbsuid.c
    SuidFile('/bin/bbsuid'),
    LinkToSuidFile('/bin/crontab', '/bin/bbsuid'),
    LinkToSuidFile('/bin/mount', '/bin/bbsuid'),
    LinkToSuidFile('/bin/passwd', '/bin/bbsuid'),
    LinkToSuidFile('/bin/ping', '/bin/bbsuid'),
    LinkToSuidFile('/bin/ping6', '/bin/bbsuid'),
    LinkToSuidFile('/bin/su', '/bin/bbsuid'),
    LinkToSuidFile('/bin/traceroute', '/bin/bbsuid'),
    LinkToSuidFile('/bin/umount', '/bin/bbsuid'),

    # chromium, http://www.chromium.org/Home
    # https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master
    SuidFile('/lib/chromium/chrome-sandbox'),
    SuidFile('/lib/chromium-browser/chrome-sandbox'),
    SuidFile('/lib/electron[67]?/chrome-sandbox'),
    SuidFile('/lib/slack/chrome-sandbox'),
    SuidFile('/lib/x86_64-linux-gnu/oxide-qt/chrome-sandbox'),
    SuidFile('/opt/google/chrome/chrome-sandbox'),

    # cronie, https://fedorahosted.org/cronie/
    # https://git.fedorahosted.org/git/cronie.git
    # or http://ftp.isc.org/isc/cron/
    SuidFile('/bin/crontab'),
    SuidFile('/bin/crontab', groups=('crontab', )),

    # dbus, http://www.freedesktop.org/wiki/Software/dbus/
    # http://cgit.freedesktop.org/dbus/dbus/tree/
    SuidFile('/lib(32|64|exec)?/dbus-1(.0)?/dbus-daemon-launch-helper'),

    # dma, DragonFly Mail Agent, https://www.dragonflybsd.org/handbook/mta/
    # https://github.com/corecode
    SuidFile('/lib/dma/dma-mbox-create'),

    # ecryptfs-utils, https://launchpad.net/ecryptfs
    # http://bazaar.launchpad.net/~ecryptfs/ecryptfs/trunk/files
    SuidFile('/s?bin/mount.ecryptfs_private',
             owners=('root', ), groups=('root', )),
    LinkToSuidFile('/s?bin/umount.ecryptfs_private', '/s?bin/mount.ecryptfs_private',
                   owners=('root', ), groups=('root', )),

    # exim, http://www.exim.org/
    # https://github.com/Exim/exim
    SuidFile('/sbin/exim4'),
    LinkToSuidFile('/bin/mailq', '/sbin/exim4'),
    LinkToSuidFile('/bin/newaliases', '/sbin/exim4'),
    LinkToSuidFile('/lib/sendmail', '/sbin/exim4'),
    LinkToSuidFile('/lib/exim4/exim4', '/sbin/exim4'),
    LinkToSuidFile('/sbin/exim', '/sbin/exim4'),
    LinkToSuidFile('/sbin/exim4', '/sbin/exim4'),
    LinkToSuidFile('/sbin/rmail', '/sbin/exim4'),
    LinkToSuidFile('/sbin/rsmtp', '/sbin/exim4'),
    LinkToSuidFile('/sbin/runq', '/sbin/exim4'),
    LinkToSuidFile('/sbin/sendmail', '/sbin/exim4'),

    # firejail, https://firejail.wordpress.com/
    # https://github.com/netblue30/firejail
    SuidFile('/bin/firejail'),

    # fuse, https://github.com/libfuse/libfuse/wiki
    # https://github.com/libfuse/libfuse
    SuidFile('/bin/fusermount'),
    SuidFile('/bin/fusermount3'),

    # glibc, http://www.gnu.org/software/libc/
    # https://sourceware.org/git/?p=glibc.git;a=tree
    SuidFile('/lib(exec)?/pt_chown'),

    # gstreamer, https://gstreamer.freedesktop.org/
    # https://cgit.freedesktop.org/gstreamer/gstreamer/tree/
    SuidFile('/libexec/gstreamer-1.0/gst-ptp-helper'),

    # inn2, https://www.eyrie.org/~eagle/software/inn/
    # https://inn.eyrie.org/trac/browser/trunk
    SuidFile('/lib/news/bin/innbind'),
    SuidFile('/lib/news/bin/rnews', owners=('news', )),
    LinkToSuidFile('/bin/rnews', '/lib/news/bin/rnews', owners=('news', )),

    # iputils, http://www.skbuff.net/iputils/
    # https://github.com/iputils/iputils
    # These files needed SUID before using capabilities
    SuidFile('/bin/arping'),
    SuidFile('/bin/clockdiff'),
    SuidFile('/bin/ping', owners=('root', ), groups=('root', )),
    SuidFile('/bin/ping6', owners=('root', ), groups=('root', )),
    SuidFile('/bin/traceroute6'),
    SuidFile('/bin/traceroute6.iputils'),
    LinkToSuidFile('/bin/ping[46]', '/bin/ping'),
    LinkToSuidFile('/sbin/ping6', '/bin/ping6'),
    LinkToSuidFile('/bin/traceroute6', '/bin/traceroute6.iputils'),
    LinkToSuidFile('/etc/alternatives/traceroute6', '/bin/traceroute6.iputils'),

    # kdelibs, https://www.kde.org/
    # https://cgit.kde.org/kdelibs.git/tree/?h=KDE/4.14
    SuidFile('/lib/kde4/libexec/fileshareset'),
    LinkToSuidFile('/lib/kde4/libexec/filesharelist', '/lib/kde4/libexec/fileshareset'),
    SuidFile('/lib/kde4/libexec/start_kdeinit'),

    # lldpd, https://vincentbernat.github.io/lldpd/
    # https://github.com/vincentbernat/lldpd
    SuidFile('/s?bin/lldpcli', owners=('_lldpd', )),
    SuidFile('/s?bin/lldpctl', owners=('_lldpd', )),
    LinkToSuidFile('/s?bin/lldpctl', '/s?bin/lldpcli', owners=('_lldpd', )),

    # lpr, https://packages.qa.debian.org/l/lpr.html
    # https://anonscm.debian.org/cgit/collab-maint/lpr.git/tree/
    SuidFile('/bin/lpq', owners=('root', ), groups=('lp', )),
    SuidFile('/bin/lpr', owners=('root', ), groups=('lp', )),
    SuidFile('/bin/lprm', owners=('root', ), groups=('lp', )),
    SuidFile('/s?bin/lpc', groups=('lp', )),

    # lxc, https://linuxcontainers.org/
    # https://github.com/lxc/lxc
    SuidFile('/lib(exec)?/lxc/lxc-user-nic'),
    SuidFile('/lib/[a-zA-Z0-9_]+-linux-gnu/lxc/lxc-user-nic'),

    # man-db, http://www.nongnu.org/man-db/
    # http://git.savannah.gnu.org/cgit/man-db.git/tree/
    SuidFile('/bin/man', owners=('man', )),
    SuidFile('/bin/mandb', owners=('man', )),

    # mtr, http://www.bitwizard.nl/mtr/
    # https://github.com/traviscross/mtr
    SuidFile('/bin/mtr'),
    SuidFile('/sbin/mtr-packet'),

    # ndisc6, http://www.remlab.net/ndisc6/
    # http://git.remlab.net/gitweb/?p=ndisc6.git;a=tree
    SuidFile('/bin/ndisc6'),
    SuidFile('/bin/rdisc6'),
    SuidFile('/bin/rltraceroute6'),
    LinkToSuidFile('/bin/traceroute6', '/bin/rltraceroute6'),
    LinkToSuidFile('/etc/alternatives/traceroute6', '/bin/rltraceroute6'),

    # nfs-utils, http://nfs.sourceforge.net/
    SuidFile('/s?bin/mount.nfs'),
    LinkToSuidFile('/s?bin/mount.nfs4', '/s?bin/mount.nfs'),
    LinkToSuidFile('/s?bin/umount.nfs', '/s?bin/mount.nfs'),
    LinkToSuidFile('/s?bin/umount.nfs4', '/s?bin/mount.nfs'),

    # nspluginwrapper, http://nspluginwrapper.org/
    # https://github.com/davidben/nspluginwrapper
    SuidFile('/lib(32|64)?/nspluginwrapper/plugin-config'),

    # openssh, http://www.openssh.com/portable.html
    # https://anongit.mindrot.org/openssh.git/tree/
    SuidFile('/bin/ssh-agent', groups=('nobody', 'ssh', )),
    SuidFile('/lib/ssh/ssh-keysign'),
    SuidFile('/lib64/misc/ssh-keysign'),
    SuidFile('/lib(exec)?/openssh/ssh-keysign'),
    SuidFile('/lib(exec)?/openssh/ssh-keysign', groups=('ssh_keys', )),

    # pam, http://linux-pam.org/
    # https://github.com/linux-pam/linux-pam
    SuidFile('/s?bin/pam_timestamp_check'),
    SuidFile('/s?bin/unix_chkpwd', owners=('root', ), groups=('root', )),
    SuidFile('/s?bin/unix_chkpwd', groups=('shadow', )),
    SuidFile('/s?bin/pam_extrausers_chkpwd', groups=('shadow', )),

    # polkit, http://www.freedesktop.org/wiki/Software/polkit
    # http://cgit.freedesktop.org/polkit/
    SuidFile('/bin/pkexec'),
    SuidFile('/lib/policykit-1/polkit-agent-helper-1'),
    SuidFile('/lib(exec)?/polkit-1/polkit-agent-helper-1'),

    # procmail, http://www.procmail.org/
    SuidFile('/bin/lockfile', groups=('mail', )),
    SuidFile('/bin/procmail', owners=('root', ), groups=('mail', )),

    # qemu, http://wiki.qemu.org/Index.html
    # http://git.qemu.org/?p=qemu.git;a=tree
    SuidFile('/lib/qemu/qemu-bridge-helper'),

    # s-nail, http://sdaoden.users.sourceforge.net/code.html#s-nail
    # https://git.sdaoden.eu/cgit/s-nail.git/
    # http://sourceforge.net/p/s-nail/code/ci/master/tree/
    SuidFile('/lib/mail-dotlock'),
    SuidFile('/lib/mail-privsep'),
    SuidFile('/lib/s-nail/s-nail-privsep'),

    # screen, http://www.gnu.org/software/screen/
    # http://git.savannah.gnu.org/cgit/screen.git/tree/
    SuidFile('/bin/screen', groups=('screen', 'utmp', )),
    SuidFile('/bin/screen-[0-9.]+'),
    LinkToSuidFile('/bin/screen', '/bin/screen-[0-9.]+'),

    # shadow, http://pkg-shadow.alioth.debian.org/
    # https://github.com/shadow-maint/shadow
    SuidFile('/bin/chage'),
    SuidFile('/bin/chage', groups=('shadow', )),
    SuidFile('/bin/chfn'),  # also provided by util-linux
    SuidFile('/bin/chsh'),  # also provided by util-linux
    SuidFile('/bin/expiry'),
    SuidFile('/bin/expiry', groups=('shadow', )),
    SuidFile('/bin/gpasswd'),
    SuidFile('/bin/newgidmap'),
    SuidFile('/bin/newgrp'),  # also provided by util-linux
    SuidFile('/bin/newuidmap'),
    SuidFile('/bin/passwd'),
    SuidFile('/bin/sg'),
    LinkToSuidFile('/bin/sg', '/bin/newgrp'),
    SuidFile('/bin/su'),  # also provided by util-linux

    # snappy (snap-confine), http://snapcraft.io/
    # https://github.com/snapcore/snapd
    SuidFile('/bin/ubuntu-core-launcher'),
    LinkToSuidFile('/bin/ubuntu-core-launcher', '/lib/snapd/snap-confine',
                   owners=('root', ), groups=('root', )),
    SuidFile('/lib/snapd/snap-confine', owners=('root', ), groups=('root', )),

    # spice-gtk3, http://spice-space.org
    SuidFile('/bin/spice-client-glib-usb-acl-helper'),

    # sssd, https://pagure.io/SSSD/sssd
    # https://github.com/SSSD/sssd
    SuidFile('/lib/x86_64-linux-gnu/sssd/krb5_child'),
    SuidFile('/lib/x86_64-linux-gnu/sssd/ldap_child'),
    SuidFile('/lib/x86_64-linux-gnu/sssd/p11_child'),
    SuidFile('/lib/x86_64-linux-gnu/sssd/proxy_child'),
    SuidFile('/lib/x86_64-linux-gnu/sssd/selinux_child'),

    # sudo, https://www.sudo.ws/
    # https://www.sudo.ws/repos/sudo
    SuidFile('/bin/sudo'),
    SuidFile('/bin/sudoedit'),
    LinkToSuidFile('/bin/sudoedit', '/bin/sudo'),

    # util-linux, https://www.kernel.org/pub/linux/utils/util-linux/
    # https://git.kernel.org/cgit/utils/util-linux/util-linux.git/tree/
    SuidFile('/bin/mount'),
    SuidFile('/bin/umount'),
    SuidFile('/s?bin/uuidd', owners=('libuuid', ), groups=('libuuid', )),
    SuidFile('/bin/wall', groups=('tty', )),
    SuidFile('/bin/write', groups=('tty', )),

    # virtualbox, https://www.virtualbox.org/
    # https://www.virtualbox.org/browser/vbox/trunk
    SuidFile('/lib/virtualbox/VBoxHeadless'),
    SuidFile('/lib/virtualbox/VBoxNetAdpCtl'),
    SuidFile('/lib/virtualbox/VBoxManage'),
    SuidFile('/lib/virtualbox/VBoxNetDHCP'),
    SuidFile('/lib/virtualbox/VBoxNetNAT'),
    SuidFile('/lib/virtualbox/VBoxSDL'),
    SuidFile('/lib/virtualbox/VirtualBox'),
    SuidFile('/lib/virtualbox/VirtualBoxVM'),

    # weston, http://wayland.freedesktop.org
    # http://cgit.freedesktop.org/wayland/weston/tree/
    SuidFile('/bin/weston-launch'),

    # xf86-video-intel, http://www.x.org/wiki/
    # http://cgit.freedesktop.org/xorg/driver/xf86-video-intel/tree/
    SuidFile('/lib/xf86-video-intel-backlight-helper'),

    # xorg-server, http://www.x.org/wiki/XServer/
    # http://cgit.freedesktop.org/xorg/xserver/tree/
    # X was root-suid before rootless X11 server was possible
    LinkToSuidFile('/bin/X', '/bin/Xorg'),
    SuidFile('/bin/X', owners=('root', ), groups=('root', )),
    SuidFile('/bin/Xorg'),
    SuidFile('/lib/xorg-server/Xorg.wrap'),
    SuidFile('/lib/xorg/Xorg.wrap', owners=('root', ), groups=('root', )),
    SuidFile('/lib(exec)?/Xorg.wrap'),
]

# Define here known and fully trusted SGID programs.
# Every project that can have both SUID and SGID programs is in the previous
# list.  Here are only projects with SGID files
TRUSTED_SGID_FILES = [
    # bsdmainutils, https://packages.debian.org/sid/bsdmainutils
    # https://anonscm.debian.org/cgit/bsdmainutils/bsdmainutils.git/tree/
    SuidFile('/bin/bsd-write', groups=('tty', )),
    LinkToSuidFile('/bin/write', '/bin/bsd-write', groups=('tty', )),
    LinkToSuidFile('/etc/alternatives/write', '/bin/bsd-write',
                   groups=('tty', )),

    # dma, DragonFly Mail Agent, https://www.dragonflybsd.org/handbook/mta/
    # https://github.com/corecode
    LinkToSuidFile('/bin/mailq', '/sbin/dma', groups=('mail', )),
    LinkToSuidFile('/bin/newaliases', '/sbin/dma', groups=('mail', )),
    LinkToSuidFile('/lib/sendmail', '/sbin/dma', groups=('mail', )),
    SuidFile('/sbin/dma', groups=('mail', )),
    LinkToSuidFile('/sbin/sendmail', '/sbin/dma', groups=('mail', )),

    # emacs, https://www.gnu.org/software/emacs/
    # http://git.savannah.gnu.org/cgit/emacs.git/tree/
    SuidFile('/lib/emacs/[0-9]+.[0-9]+/[-_a-zA-Z0-9]+/movemail',
             groups=('mail', )),

    # evolution, https://wiki.gnome.org/Apps/Evolution
    # https://git.gnome.org/browse/evolution-data-server/tree/
    SuidFile('/lib/evolution/camel-lock-helper-[0-9]+.[0-9]+',
             groups=('mail', )),
    SuidFile('/libexec/camel-lock-helper-[0-9]+.[0-9]+',
             groups=('mail', )),

    # kde-runtime, https://www.kde.org/
    # https://cgit.kde.org/kdesu.git/tree/
    SuidFile('/lib/kde4/libexec/kdesud', groups=('nobody', 'nogroup', )),

    # libcgroup, http://libcg.sourceforge.net
    # http://sourceforge.net/p/libcg/libcg/ci/master/tree/
    SuidFile('/bin/cgclassify', groups=('cgred', )),
    SuidFile('/bin/cgexec', groups=('cgred', )),

    # liblockfile, https://packages.qa.debian.org/libl/liblockfile.html
    # https://sources.debian.net/src/liblockfile/
    SuidFile('/bin/dotlockfile', groups=('mail', )),

    # libutempter, ftp://ftp.altlinux.org/pub/people/ldv/utempter
    # http://git.altlinux.org/people/ldv/packages/?p=libutempter.git;a=tree
    LinkToSuidFile('/sbin/utempter', '/lib64/misc/utempter/utempter',
                   groups=('utmp', )),
    SuidFile('/lib(exec)?/utempter/utempter', groups=('utmp', )),
    SuidFile('/lib64/misc/utempter/utempter', groups=('utmp', )),
    SuidFile('/lib/[a-zA-Z0-9_]+-linux-gnu/utempter/utempter', groups=('utmp', )),

    # lockdev, https://alioth.debian.org/projects/lockdev/
    # https://alioth.debian.org/plugins/scmgit/cgi-bin/gitweb.cgi?p=lockdev/lockdev.git;a=tree
    SuidFile('/s?bin/lockdev', groups=('lock', )),

    # lockfile-progs, https://packages.qa.debian.org/l/lockfile-progs.html
    # https://sources.debian.net/src/lockfile-progs/
    SuidFile('/bin/mail-lock', groups=('mail', )),
    SuidFile('/bin/mail-touchlock', groups=('mail', )),
    SuidFile('/bin/mail-unlock', groups=('mail', )),

    # maildrop, http://www.courier-mta.org/maildrop/
    LinkToSuidFile('/bin/lockmail', '/bin/lockmail.maildrop',
                   groups=('mail', )),
    SuidFile('/bin/lockmail.maildrop', groups=('mail', )),
    SuidFile('/bin/maildrop', groups=('mail', )),
    LinkToSuidFile('/etc/alternatives/lockmail', '/bin/lockmail.maildrop',
                   groups=('mail', )),

    # mailman, https://www.gnu.org/software/mailman/
    # https://gitlab.com/mailman/mailman/tree/master
    SuidFile('/lib/cgi-bin/mailman/[a-z]+', groups=('list', )),
    SuidFile('/lib/mailman/mail/mailman', groups=('list', )),
    LinkToSuidFile('/lib/mailman/mail/wrapper', '/lib/mailman/mail/mailman',
                   groups=('list', )),

    # mailutils, https://mailutils.org/
    # https://git.savannah.gnu.org/cgit/mailutils.git/tree/
    SuidFile('/bin/dotlock.mailutils', groups=('mail', )),
    SuidFile('/bin/dotlock.mailutils', groups=('root', )),
    LinkToSuidFile('/bin/dotlock', '/bin/dotlock.mailutils', groups=('mail', )),
    LinkToSuidFile('/bin/dotlock', '/bin/dotlock.mailutils', groups=('root', )),
    LinkToSuidFile('/etc/alternatives/dotlock', '/bin/dotlock.mailutils',
                   groups=('root', )),

    # mlocate, https://fedorahosted.org/mlocate/
    # https://fedorahosted.org/mlocate/browser
    LinkToSuidFile('/bin/locate', '/bin/mlocate', groups=('mlocate', )),
    SuidFile('/bin/locate', groups=('slocate', )),
    SuidFile('/bin/mlocate', groups=('mlocate', )),
    LinkToSuidFile('/etc/alternatives/locate', '/bin/mlocate',
                   groups=('mlocate', )),

    # mutt, http://www.mutt.org/
    # http://dev.mutt.org/hg/mutt/file/tip
    SuidFile('/bin/mutt_dotlock', groups=('mail', )),

    # postfix, http://www.postfix.org/
    # https://github.com/vdukhovni/postfix
    SuidFile('/s?bin/postdrop', groups=('postdrop', )),
    SuidFile('/s?bin/postqueue', groups=('postdrop', )),

    # rxvt-unicode, http://software.schmorp.de/pkg/rxvt-unicode.html
    # http://cvs.schmorp.de/rxvt-unicode/
    LinkToSuidFile('/bin/rxvt', '/bin/urxvt', groups=('utmp', )),
    LinkToSuidFile('/bin/rxvt-unicode', '/bin/urxvt', groups=('utmp', )),
    SuidFile('/bin/urxvt', groups=('utmp', )),
    SuidFile('/bin/urxvtd', groups=('utmp', )),
    LinkToSuidFile('/etc/alternatives/rxvt', '/bin/urxvt',
                   groups=('utmp', )),

    # uw-imap, https://www.washington.edu/imap/
    # https://anonscm.debian.org/cgit/collab-maint/uw-imap.git/tree/
    SuidFile('/bin/mlock', groups=('mail', )),

    # vte, https://developer.gnome.org/vte/
    # https://github.com/GNOME/vte
    # Until https://github.com/GNOME/vte/commit/299c700c743c7d5dfd14e3b3a21417d9e9f35818 (0.42.0)
    SuidFile('/lib/libvte-[-.0-9]+/gnome-pty-helper', groups=('utmp', )),
    SuidFile('/lib/libvte9/gnome-pty-helper', groups=('utmp', )),
    SuidFile('/lib64/vte/gnome-pty-helper', groups=('utmp', )),
]
# Sanity check
assert all(x.owners is None for x in TRUSTED_SGID_FILES)

# Define known but not-so-trusted programs
# These programs can be installed by packages but a careful system
# administrator may decide to remove the SUID bit without breaking the entire
# system, in order to squeeze the attack surface.
KNOWN_SUID_FILES = [
    # atop, http://www.atoptool.nl/
    # http://www.atoptool.nl/downloadnetatop.php
    SuidFile('/bin/atop'),
    LinkToSuidFile('/bin/atopsar', '/bin/atop'),

    # authbind, https://www.debian-administration.org/article/386/Running_network_services_as_a_non-root_user.
    # http://www.chiark.greenend.org.uk/ucgi/~ian/git?p=authbind.git;a=tree
    SuidFile('/lib/authbind/helper'),

    # cdrtools, http://cdrtools.sourceforge.net/private/cdrecord.html
    # https://sourceforge.net/projects/cdrtools/files/alpha/
    SuidFile('/bin/cdda2wav'),
    SuidFile('/bin/cdrecord'),
    LinkToSuidFile('/bin/icedax', '/bin/cdda2wav'),
    SuidFile('/bin/readcd'),
    LinkToSuidFile('/bin/readom', '/bin/readcd'),
    SuidFile('/bin/rscsi'),
    LinkToSuidFile('/bin/wodim', '/bin/cdrecord'),

    # cifs-utils, https://wiki.samba.org/index.php/LinuxCIFS_utils
    # https://git.samba.org/?p=cifs-utils.git;a=tree
    SuidFile('/s?bin/mount.cifs', owners=('root', ), groups=('root', )),
    LinkToSuidFile('/s?bin/mount.smb3', '/s?bin/mount.cifs',
                   owners=('root', ), groups=('root', )),

    # eject, http://www.pobox.com/~tranter/eject.html
    SuidFile('/lib/eject/dmcrypt-get-device'),

    # glusterfs, https://www.gluster.org/
    # https://github.com/gluster/glusterfs/tree/master/contrib/fuse-util
    SuidFile('/bin/fusermount-glusterfs'),

    # inetutils, http://www.gnu.org/software/inetutils/
    # http://git.savannah.gnu.org/cgit/inetutils.git/tree/
    SuidFile('/bin/rcp', owners=('root', ), groups=('root', )),
    SuidFile('/bin/rlogin', owners=('root', ), groups=('root', )),
    SuidFile('/bin/rsh', owners=('root', ), groups=('root', )),

    # initscripts, https://fedorahosted.org/releases/i/n/initscripts/
    # https://git.fedorahosted.org/cgit/initscripts.git/tree/
    SuidFile('/s?bin/netreport', groups=('root', )),
    SuidFile('/s?bin/usernetctl'),

    # kismet, https://www.kismetwireless.net/
    # https://www.kismetwireless.net/gitweb/?p=kismet.git;a=tree
    SuidFile('/bin/kismet_capture'),

    # krb5, http://web.mit.edu/kerberos/
    SuidFile('/bin/ksu'),

    # landscape-client, http://www.ubuntu.com/management
    # http://bazaar.launchpad.net/~landscape/landscape-client/trunk/files
    SuidFile('/lib/landscape/apt-update'),

    # mariadb, https://mariadb.com/kb/en/authentication-plugin-pam/
    # https://github.com/MariaDB/server
    SuidFile('/lib/mysql/plugin/auth_pam_tool_dir/auth_pam_tool'),

    # ntfs-3g, http://www.tuxera.com/community/open-source-ntfs-3g/
    # https://sourceforge.net/p/ntfs-3g/ntfs-3g/ci/edge/tree/
    SuidFile('/bin/ntfs-3g'),
    LinkToSuidFile('/s?bin/mount.ntfs', '/bin/ntfs-3g'),
    LinkToSuidFile('/s?bin/mount.ntfs-3g', '/bin/ntfs-3g'),

    # open-vm-tools, https://sourceforge.net/projects/open-vm-tools/
    # https://github.com/vmware/open-vm-tools
    LinkToSuidFile('/bin/vmware-user', '/bin/vmware-user-suid-wrapper',
                   owners=('root', ), groups=('root', )),
    LinkToSuidFile('/bin/vmware-user', '/lib/vmware-tools/bin(32|64)/vmware-user-suid-wrapper'),
    SuidFile('/bin/vmware-user-suid-wrapper',
             owners=('root', ), groups=('root', )),
    SuidFile('/lib/vmware-tools/bin(32|64)/vmware-user-suid-wrapper'),

    # pmount, https://launchpad.net/pmount
    # https://bazaar.launchpad.net/~fourmond/pmount/main/files/head:/
    SuidFile('/bin/pmount'),
    SuidFile('/bin/pumount'),

    # policycoreutils, https://github.com/SELinuxProject/selinux/wiki
    # https://github.com/SELinuxProject/selinux/tree/master/policycoreutils
    SuidFile('/bin/seunshare'),

    # ppp, http://www.samba.org/ppp/
    # https://github.com/paulusmack/ppp/
    SuidFile('/s?bin/pppd'),

    # pulseaudio-module-bluetooth, http://www.pulseaudio.org/
    # http://cgit.freedesktop.org/pulseaudio/pulseaudio/tree/
    SuidFile('/libexec/pulse/proximity-helper'),

    # qubes, https://www.qubes-os.org/doc/qfilecopy/
    # https://github.com/QubesOS/qubes-core-agent-linux
    SuidFile('/lib/qubes/qfile-unpacker'),

    # shadow, http://pkg-shadow.alioth.debian.org/
    # https://github.com/shadow-maint/shadow
    # These files can work well without being setuid-root
    # ... and they were not intended to be setuid-root (CVE-2019-19882)
    # https://security.archlinux.org/ASA-201912-4
    # SuidFile('/bin/chgpasswd'),
    # SuidFile('/bin/chpasswd'),
    # SuidFile('/bin/groupadd'),
    # SuidFile('/bin/groupdel'),
    # SuidFile('/bin/groupmod'),
    # SuidFile('/bin/newusers'),
    # SuidFile('/bin/useradd'),
    # SuidFile('/bin/userdel'),
    # SuidFile('/bin/usermod'),

    # systemtap, https://sourceware.org/systemtap/
    # https://sourceware.org/git/gitweb.cgi?p=systemtap.git;a=tree
    SuidFile('/bin/staprun'),

    # usermode, https://fedorahosted.org/usermode/
    # https://fedorahosted.org/usermode/browser
    SuidFile('/s?bin/userhelper'),

    # vmware-workstation, https://www.vmware.com/products/workstation-player.html
    SuidFile('/bin/vmware-authd', owners=('root', ), groups=('root', )),
    SuidFile('/lib/vmware/bin/vmware-vmx',
             owners=('root', ), groups=('root', )),
    SuidFile('/lib/vmware/bin/vmware-vmx-debug',
             owners=('root', ), groups=('root', )),
    SuidFile('/lib/vmware/bin/vmware-vmx-stats',
             owners=('root', ), groups=('root', )),
]

# Define similar things for files with capabilities
# The text description of capabilities is explained in cap_to_text manpage.
# The leading "=" indicates that is the capabilities are first reset.
TRUSTED_CAPS_FILES = [
    # apache, http://httpd.apache.org/docs/trunk/suexec.html
    # http://svn.apache.org/repos/asf/httpd/httpd/
    CapsFile('/s?bin/suexec', '= cap_setgid,cap_setuid+ep'),

    # fping, http://www.fping.org/
    # https://github.com/schweikert/fping
    CapsFile('/bin/fping', '= cap_net_raw+ep'),
    CapsFile('/bin/fping6', '= cap_net_raw+ep'),

    # gnome-keyring, https://www.gnome.org/
    # https://git.gnome.org/browse/gnome-keyring/tree/
    CapsFile('/bin/gnome-keyring-daemon', '= cap_ipc_lock+ep'),

    # gstreamer, https://gstreamer.freedesktop.org/
    # https://cgit.freedesktop.org/gstreamer/gstreamer/tree/
    CapsFile('/lib/gstreamer-1.0/gst-ptp-helper', '= cap_net_bind_service,cap_net_admin+ep'),
    CapsFile('/lib/[a-zA-Z0-9_]+-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper',
             '= cap_net_bind_service,cap_net_admin+ep'),

    # inetutils, http://www.gnu.org/software/inetutils/
    # http://git.savannah.gnu.org/cgit/inetutils.git/tree/
    CapsFile('/bin/rcp', '= cap_net_bind_service+ep'),
    CapsFile('/bin/rlogin', '= cap_net_bind_service+ep'),
    CapsFile('/bin/rsh', '= cap_net_bind_service+ep'),

    # iputils, http://www.skbuff.net/iputils/
    # https://github.com/iputils/iputils
    CapsFile('/s?bin/arping', '= cap_net_raw+ep'),
    CapsFile('/s?bin/arping', '= cap_net_raw+p'),
    CapsFile('/s?bin/clockdiff', '= cap_net_raw+ep'),
    CapsFile('/s?bin/clockdiff', '= cap_net_raw+p'),
    CapsFile('/bin/ping', '= cap_net_raw+ep'),
    CapsFile('/bin/ping', '= cap_net_admin,cap_net_raw+ep'),
    CapsFile('/bin/ping', '= cap_net_admin,cap_net_raw+p'),
    CapsFile('/bin/ping6', '= cap_net_raw+ep'),
    CapsFile('/bin/ping6', '= cap_net_admin,cap_net_raw+ep'),
    LinkToCapsFile('/bin/ping[46]', '/bin/ping',
                   '= cap_net_raw+ep'),
    LinkToCapsFile('/s?bin/ping[46]?', '/bin/ping',
                   '= cap_net_admin,cap_net_raw+p'),
    LinkToCapsFile('/sbin/ping6', '/bin/ping6',
                   '= cap_net_admin,cap_net_raw+ep'),
    CapsFile('/bin/traceroute6.iputils', '= cap_net_raw+ep'),
    LinkToCapsFile('/bin/traceroute6', '/bin/traceroute6.iputils',
                   '= cap_net_raw+ep'),
    LinkToCapsFile('/etc/alternatives/traceroute6', '/bin/traceroute6.iputils',
                   '= cap_net_raw+ep'),

    # kinit, https://api.kde.org/frameworks/kinit/html/index.html
    # https://cgit.kde.org/kinit.git/tree/
    CapsFile('/lib/x86_64-linux-gnu/libexec/kf5/start_kdeinit', '= cap_sys_resource+ep'),

    # kismet, https://www.kismetwireless.net/
    # https://github.com/kismetwireless/kismet.git
    CapsFile('/bin/kismet_cap_freaklabs_zigbee', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_kismetdb', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_linux_bluetooth', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_linux_wifi', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_nrf_51822', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_nrf_mousejack', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_pcapfile', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_sdr_rtl433', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_sdr_rtl433_mqtt', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_sdr_rtladsb', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_sdr_rtladsb_mqtt', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_sdr_rtlamr', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_sdr_rtlamr_mqtt', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/kismet_cap_ti_cc_2540', '= cap_net_admin,cap_net_raw+eip'),

    # ksysguard, https://userbase.kde.org/KSysGuard
    # https://cgit.kde.org/ksysguard.git/tree/
    CapsFile('/lib/x86_64-linux-gnu/libexec/ksysguard/ksgrd_network_helper',
             '= cap_net_raw+ep'),

    # monitoring-plugins, https://www.monitoring-plugins.org/
    # https://github.com/monitoring-plugins/monitoring-plugins
    CapsFile('/lib/nagios/plugins/check_dhcp',
             '= cap_net_bind_service,cap_net_raw+ep'),
    CapsFile('/lib/nagios/plugins/check_icmp', '= cap_net_raw+ep'),
    LinkToCapsFile('/lib/nagios/plugins/check_host',
                   '/lib/nagios/plugins/check_icmp', '= cap_net_raw+ep'),
    LinkToCapsFile('/lib/nagios/plugins/check_rta_multi',
                   '/lib/nagios/plugins/check_icmp', '= cap_net_raw+ep'),

    # mtr, http://www.bitwizard.nl/mtr/
    # https://github.com/traviscross/mtr
    CapsFile('/bin/mtr', '= cap_net_raw+ep'),
    CapsFile('/bin/mtr-packet', '= cap_net_bind_service,cap_net_raw+ep'),
    CapsFile('/s?bin/mtr-packet', '= cap_net_raw+ep'),

    # policycoreutils-newrole, https://github.com/SELinuxProject/selinux/wiki
    # https://github.com/SELinuxProject/selinux/tree/master/policycoreutils/newrole
    CapsFile('/bin/newrole',
             '= cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,' +
             'cap_setpcap,cap_sys_admin,cap_audit_write+ep'),

    # shadow, http://pkg-shadow.alioth.debian.org/
    # https://github.com/shadow-maint/shadow
    CapsFile('/bin/newgidmap', '= cap_setgid+ep'),
    CapsFile('/bin/newuidmap', '= cap_setuid+ep'),

    # systemd, http://www.freedesktop.org/wiki/Software/systemd/
    # https://github.com/systemd/systemd
    CapsFile('/bin/systemd-detect-virt',
             '= cap_dac_override,cap_sys_ptrace+ep'),

    # wireshark, https://www.wireshark.org/
    # https://code.wireshark.org/review/gitweb?p=wireshark.git;a=tree
    # cap_dac_override is for usbmon, https://bugs.archlinux.org/task/44465
    CapsFile('/bin/dumpcap', '= cap_net_admin,cap_net_raw+eip'),
    CapsFile('/bin/dumpcap', '= cap_net_admin,cap_net_raw+ep'),
    CapsFile('/bin/dumpcap', '= cap_dac_override,cap_net_admin,cap_net_raw+eip'),
]


if sys.platform == 'darwin':
    # Add OSX suid files
    TRUSTED_SUID_FILES += [
        SuidFile('/bin/atq'),
        SuidFile('/bin/atrm'),
        SuidFile('/bin/batch'),
        SuidFile('/bin/login'),
        SuidFile('/bin/ps'),
        SuidFile('/bin/quota'),
        SuidFile('/bin/top'),
        SuidFile('/sbin/traceroute'),
        SuidFile('/sbin/traceroute6'),
    ]
    TRUSTED_SGID_FILES += [
        SuidFile('/sbin/postdrop', groups=('_postdrop', )),
        SuidFile('/sbin/postqueue', groups=('_postdrop', )),
    ]


# Load the libcap library to read file capabilities
# Only load the version 2 of the library if there is no global symlink
try:
    libcap = ctypes.CDLL('libcap.so')
except OSError:
    try:
        libcap = ctypes.CDLL('libcap.so.2')
    except OSError:
        libcap = None

if libcap is not None:
    libcap.cap_get_file.argtypes = [ctypes.c_char_p]
    libcap.cap_get_file.restype = ctypes.c_void_p
    libcap.cap_to_text.argtypes = [ctypes.c_void_p,
                                   ctypes.POINTER(ctypes.c_size_t)]
    libcap.cap_to_text.restype = ctypes.c_char_p
    libcap.cap_free.argtypes = [ctypes.c_void_p]


def getcap_file(filepath):
    """Get a string describing the capabalities of a file, if any"""
    # Encode the filepath to a sequence of bytes, if needed
    if sys.version_info >= (3, ):
        filepath = filepath.encode('utf-8', errors='surrogateescape')
    caps = libcap.cap_get_file(filepath)
    txt_caps = libcap.cap_to_text(caps, None)
    libcap.cap_free(caps)
    if txt_caps is None:
        return ''

    str_caps = txt_caps.decode('ascii')
    libcap.cap_free(txt_caps)
    return str_caps


def analyze_suid_file(filepath, realpath, owner, group):
    """Analyze a SUID file and return True if it is known, False otherwise

    owner parameter is only filled when the file is an SUID program
    group parameter is only filled when the file is an SGID program
    """
    descl = []
    if owner is not None:
        descl.append(owner + '-suid')
    if group is not None:
        descl.append(group + '-sgid')
    if filepath == realpath:
        descl.append('file ' + filepath)
    else:
        descl.append('link ' + filepath + ' -> ' + realpath)
    desc = ' '.join(descl)

    # /usr/lib/debug/.build-id contains symlinks to programs
    # ... let's consider them as real programs
    # Fedora uses /usr/lib/.build-id/XX/XXXXXXXXXXX... where X is a hexdigit
    if re.match(r'^(/usr)?/lib(/debug)?/\.build-id/[0-9a-f][0-9a-f]/', filepath):
        filepath = realpath

    # Sometimes there are symlinks from /usr/bin to /bin
    # ... let's consider this as only the target
    if filepath.startswith('/usr') and filepath[4:] == realpath:
        filepath = realpath

    if any(trusted.is_match(filepath, realpath, owner, group)
           for trusted in TRUSTED_SUID_FILES):
        print("Trusted %s" % desc)
        return True
    if any(trusted.is_match(filepath, realpath, owner, group)
           for trusted in TRUSTED_SGID_FILES):
        print("Trusted %s" % desc)
        return True
    elif any(known.is_match(filepath, realpath, owner, group)
             for known in KNOWN_SUID_FILES):
        logger.warning("known but not-so-trusted %s", desc)
        return True

    logger.error("unknown %s", desc)
    return False


def analyze_caps_file(filepath, realpath, caps):
    """Analyze a file with capabilities and return whether it is trusted"""
    if filepath == realpath:
        desc = 'file %s with caps: %s' % (filepath, caps)
    else:
        desc = 'link %s -> %s with caps: %s' % (filepath, realpath, caps)

    # Simplify /usr/lib/debug/.build-id like in analyze_suid_file
    if re.match(r'^(/usr)?/lib(/debug)?/\.build-id/[0-9a-f][0-9a-f]/', filepath):
        filepath = realpath

    if any(trusted.is_match(filepath, realpath, caps)
           for trusted in TRUSTED_CAPS_FILES):
        print("Trusted %s" % desc)
        return True

    logger.error("unknown %s", desc)
    return False


def analyze_files_in(dirname, files):
    """Analyze the files in the specified directory

    Return False if an unknown dangerous file has been found, True otherwise
    (True means "everything looks fine").
    """
    suid_files = set()
    cap_files = set()
    for filename in files:
        filepath = os.path.join(dirname, filename)

        # Resolve symbolic link references
        try:
            realpath = os.path.realpath(filepath)
        except OSError as exc:
            if exc.errno in (errno.EACCES, errno.ENOENT):
                # This may happen with /proc/... symlinks, for example
                # * EACCES when reading information of root task as user
                # * ENOENT when reading symlinks for a kernel thread
                if re.match(r'/proc/[0-9]+/', filepath):
                    continue
            raise

        if not os.path.exists(realpath):
            # Ignore broken symbolic links
            logger.debug("broken symbolic link %s", filepath)
            continue
        filestat = os.lstat(realpath)
        mode = filestat.st_mode

        # Filter-out directories
        if stat.S_ISDIR(mode):
            continue

        # Find executable files with SUID bit
        owner = None
        if mode & stat.S_ISUID and mode & stat.S_IXUSR:
            try:
                userinfo = pwd.getpwuid(filestat.st_uid)
            except KeyError:
                # If the UID is unknown, use it directly
                owner = str(filestat.st_uid)
            else:
                owner = userinfo.pw_name

        # Find executable files with SGID bit
        group = None
        if mode & stat.S_ISGID and mode & stat.S_IXGRP:
            try:
                grpinfo = grp.getgrgid(filestat.st_gid)
            except KeyError:
                # If the GID is unknown, use it directly
                group = str(filestat.st_gid)
            else:
                group = grpinfo.gr_name

        if owner is not None or group is not None:
            suid_files.add((filepath, realpath, owner, group))

        # Find regular files with capabilities (cap_get_file() return is
        # undefined on non-regular file according to its man page)
        if libcap is not None and stat.S_ISREG(mode):
            caps = getcap_file(realpath)
            if caps:
                cap_files.add((filepath, realpath, caps))

    retval = True

    # Analyze SUID (and SGID) files
    for filepath, realpath, owner, group in sorted(suid_files):
        if not analyze_suid_file(filepath, realpath, owner, group):
            retval = False

    # Analyze files with capabilities
    for filepath, realpath, caps in sorted(cap_files):
        if not analyze_caps_file(filepath, realpath, caps):
            retval = False

    return retval


class ColoredFormatter(logging.Formatter):
    """Color logs in terminal"""
    COLORS = {
        'DEBUG': '\033[37m',  # gray
        'INFO': '',
        'WARNING': '\033[1;33m',  # yellow
        'ERROR': '\033[1;31m',  # red
        'CRITICAL': '\033[1;31m',  # red
    }
    COLORS_RESET = '\033[0m'

    def __init__(self, *args, **kwargs):
        if sys.version_info >= (2, 7):
            super(ColoredFormatter, self).__init__(*args, **kwargs)
        else:
            logging.Formatter.__init__(self, *args, **kwargs)

    def format(self, record):
        if sys.version_info >= (2, 7):
            line = super(ColoredFormatter, self).format(record)
        else:
            line = logging.Formatter.format(self, record)
        levelname = record.levelname
        if levelname in self.COLORS:
            line = self.COLORS[levelname] + line + self.COLORS_RESET
        return line


def main(argv=None):
    parser = optparse.OptionParser(
        description="List the installed SUID binaries")
    parser.add_option('-d', '--debug', action='store_true',
                      help="show debug messages")
    parser.add_option('-l', '--lib', action='store_true',
                      help="check the files in library folders")
    parser.add_option('-p', '--path', action='store_true',
                      help="check the files in $PATH")
    parser.add_option('-x', '--xdev', action='store_true',
                      help="do not cross mountpoints under / and /usr")
    args, remaining = parser.parse_args(argv)
    if remaining:
        parser.error("Unexpected parameter given")

    # Configure the logging
    log_handler = logging.StreamHandler()
    log_handler.setFormatter(
        ColoredFormatter('[%(levelname)s] %(message)s'))
    root_logger = logging.getLogger()
    root_logger.addHandler(log_handler)
    root_logger.setLevel(logging.DEBUG if args.debug else logging.INFO)

    # Warn here if libcap was not found
    if libcap is None:
        logger.warning("libcap.so has not been found, not analyzing file caps")
        logger.debug("libcap.so is usually installed as a dependency of iputils (ping, ping6...)")

    # Find if we specified special directories
    base_dirs = set()
    if args.lib:
        # Add library folders
        for libdir in ('/lib', '/lib32', '/lib64', '/libexec'):
            lib_realpath = os.path.realpath(libdir)
            if os.path.exists(lib_realpath):
                base_dirs.add(lib_realpath)
            lib_realpath = os.path.realpath('/usr' + libdir)
            if os.path.exists(lib_realpath):
                base_dirs.add(lib_realpath)

    if args.path:
        # Enumerate every part of $PATH which is a directory (not a symlink)
        for dir_path in os.environ.get('PATH', '').split(os.pathsep):
            dir_path = os.path.realpath(dir_path)
            if not os.path.exists(dir_path):
                logger.warning("non-existing PATH component %s", dir_path)
            else:
                base_dirs.add(dir_path)

    if not base_dirs:
        # By default, walk / and /usr
        base_dirs = ('/', '/usr')

    if args.xdev:
        def filter_out_dir(dirpath):
            """Filter to walk base_dirs without crossing mountpoints nor other
            directories
            """
            return dirpath in base_dirs or os.path.ismount(dirpath)
    else:
        def filter_out_dir(dirpath):
            """Filter to walk base_dirs without crossing other specified
            directories"""
            return dirpath in base_dirs

    exitcode = 0
    for basedir in sorted(base_dirs):
        for root, dirs, files in os.walk(basedir, topdown=True):
            # Always ignore /proc processus files
            if root == '/proc':
                dirs[:] = [name for name in dirs if not name.isdigit()]
            dirs[:] = sorted(
                dirname for dirname in dirs
                if not filter_out_dir(os.path.join(root, dirname)))
            if not analyze_files_in(root, files):
                exitcode = 1
    return exitcode


if __name__ == '__main__':
    sys.exit(main())
