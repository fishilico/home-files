#!/usr/bin/env python
# -*- coding: utf-8 -*-
# SPDX-License-Identifier: MIT
# Copyright (c) 2016-2020 Nicolas Iooss
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Display the capabilities of the current session

See also:
* Tools from libcap (getpcaps $PID, getcap...):

    $ capsh --decode=2000
    0x0000000000002000=cap_net_raw

* Tools from libcap-ng (pscap, filecap, netcap...)
"""
import argparse
import errno
import math
import re
import sys


CAPABILITY_PATH = (
    '/usr/include/linux/capability.h',
    '/usr/src/linux/include/uapi/linux/capability.h',
)

CAPABILITIES = [
    'CAP_CHOWN',  # 0
    'CAP_DAC_OVERRIDE',  # 1
    'CAP_DAC_READ_SEARCH',  # 2
    'CAP_FOWNER',  # 3
    'CAP_FSETID',  # 4
    'CAP_KILL',  # 5
    'CAP_SETGID',  # 6
    'CAP_SETUID',  # 7
    'CAP_SETPCAP',  # 8
    'CAP_LINUX_IMMUTABLE',  # 9
    'CAP_NET_BIND_SERVICE',  # 10
    'CAP_NET_BROADCAST',  # 11
    'CAP_NET_ADMIN',  # 12
    'CAP_NET_RAW',  # 13
    'CAP_IPC_LOCK',  # 14
    'CAP_IPC_OWNER',  # 15
    'CAP_SYS_MODULE',  # 16
    'CAP_SYS_RAWIO',  # 17
    'CAP_SYS_CHROOT',  # 18
    'CAP_SYS_PTRACE',  # 19
    'CAP_SYS_PACCT',  # 20
    'CAP_SYS_ADMIN',  # 21
    'CAP_SYS_BOOT',  # 22
    'CAP_SYS_NICE',  # 23
    'CAP_SYS_RESOURCE',  # 24
    'CAP_SYS_TIME',  # 25
    'CAP_SYS_TTY_CONFIG',  # 26
    'CAP_MKNOD',  # 27
    'CAP_LEASE',  # 28
    'CAP_AUDIT_WRITE',  # 29
    'CAP_AUDIT_CONTROL',  # 30
    'CAP_SETFCAP',  # 31
    'CAP_MAC_OVERRIDE',  # 32
    'CAP_MAC_ADMIN',  # 33
    'CAP_SYSLOG',  # 34
    'CAP_WAKE_ALARM',  # 35
    'CAP_BLOCK_SUSPEND',  # 36
    'CAP_AUDIT_READ',  # 37
]

# Transitions across execve of file F from P to P':
# * P'(effective) = F(effective) ? P'(permitted) : P'(ambient)
# * P'(permitted) = (P(inheritable) & F(inheritable)) | (F(permitted) & Bounding) | P'(ambient)
# * P'(inheritable) = P(inheritable)
# * P'(ambient) = (file is privileged) ? 0 : P(ambient)
KNOWN_CAPSETS = [
    'Eff',  # Effective
    'Prm',  # Permitted, superset of effective set
    'Inh',  # Inheritable, preserved across execve
    'Amb',  # Ambiant, preserved across execve of an unprivileged program
    'Bnd',  # Bounding set, mask a file permitted set across execve
]


def list_new_caps(list_sorted=False):
    """List the known capabilities, using capability.h if it is found"""
    new_caps = {}
    for path in CAPABILITY_PATH:
        try:
            with open(path, 'r') as fcap:
                for line in fcap:
                    matches = re.match(r'#define\s+(CAP_[A-Z_]+)\s+(.+)$',
                                       line.strip())
                    if matches is not None:
                        name, value = matches.groups()
                        if name == 'CAP_LAST_CAP':
                            # Check "#define CAP_LAST_CAP CAP_..." definition
                            assert value in new_caps
                            assert new_caps[value] == max(new_caps.values())
                        else:
                            new_caps[name] = int(value)
            print("Using {0}".format(path))
            break
        except IOError as exc:
            # Ignore not found files
            if exc.errno in (errno.EACCES, errno.ENOENT):
                continue
            raise

    if new_caps:
        cap_size = max(new_caps.values()) + 1
        assert cap_size >= len(new_caps)
        capabilities = [None] * cap_size
        for name, value in new_caps.items():
            assert capabilities[value] is None  # No duplicate values
            capabilities[value] = name
    else:
        print("Using internal data.")
        capabilities = CAPABILITIES

    list_caps = list(enumerate(capabilities))
    if list_sorted:
        list_caps.sort(key=lambda x: x[::-1])
    for value, name in list_caps:
        print('{0:2d}: {1}'.format(value, name))


def read_caps_from_proc(pid=None):
    """Gather the capability sets for the given process"""
    path = '/proc/{0}/status'.format(str(pid) if pid is not None else 'self')
    caps = {}
    with open(path, 'r') as fstatus:
        for line in fstatus:
            matches = re.match(r'Cap([^:]+):\s*([0-9a-fA-F]+)$', line.strip())
            if matches is not None:
                name, value = matches.groups()
                caps[name] = int(value, 16)
    return caps


def get_last_cap():
    """Read the last capability available on a system"""
    try:
        with open('/proc/sys/kernel/cap_last_cap', 'r') as flastcap:
            lastcap = int(flastcap.read())
            if lastcap > len(CAPABILITIES) - 1:
                print("Warning: the kernel supports newer capabilities!")
            return lastcap
    except IOError:
        return len(CAPABILITIES) - 1


def hex_number(value):
    """Decode an hexadecimal integer value"""
    if value.startswith(('0x', '0X')):
        return int(value[2:], 16)
    return int(value, 16)


def main(argv=None):
    parser = argparse.ArgumentParser(description="Display my capabilities")
    parser.add_argument('caps', metavar='CAPS', nargs='?', type=hex_number,
                        help="capability mask to use instead of the current one")
    parser.add_argument('-C', '--no-color', action='store_true',
                        help="do not color the output")
    parser.add_argument('-l', '--list', action='store_true',
                        help="list the known capabilities")
    parser.add_argument('-L', '--list-sorted', action='store_true',
                        help="like --list, by alphabetical order")
    parser.add_argument('-p', '--pid', type=int,
                        help="use the given process instead")
    args = parser.parse_args(argv)

    if args.list or args.list_sorted:
        list_new_caps(args.list_sorted)
        return

    last_cap = get_last_cap()

    if args.caps is not None:
        active_mask = args.caps
        inheritable_mask = 0
        bounded_mask = (1 << (last_cap + 1)) - 1
        caps = {'arg': active_mask}
    else:
        caps = read_caps_from_proc(args.pid)
        active_mask = caps.get('Eff', 0) | caps.get('Prm', 0)
        inheritable_mask = caps.get('Inh', 0) | caps.get('Amb', 0)
        bounded_mask = caps.get('Bnd', 0)

    # Find potential new capabilities which are enabled
    if sys.version_info >= (2, 7):
        cap_count = max(cap.bit_length() for cap in caps.values())
    else:
        print(caps.values())
        cap_count = max(1 + int(math.log(cap, 2)) if cap else 0 for cap in caps.values())
    for i in range(len(CAPABILITIES), cap_count):
        CAPABILITIES.append(str(i))

    # Show the capabilities by set
    capsets = [sname for sname in KNOWN_CAPSETS if sname in caps]
    capsets += sorted((sname for sname in caps if sname not in KNOWN_CAPSETS))

    for sname in capsets:
        print('{0}: {1:#x}'.format(sname, caps[sname]))
    print('')

    line_format = \
        ('\033[{0}m' if not args.no_color else '') + \
        '{{1:<{0}s}}  '.format(max(len(name) for name in CAPABILITIES)) + \
        ' '.join('{{2[{0}]:{1}s}}'.format(idx, len(sname)) for idx, sname in enumerate(capsets)) + \
        ' ({3})' + \
        ('\033[m' if not args.no_color else '')
    print(line_format.format('', '', capsets, 'description'))
    for icap, name in enumerate(CAPABILITIES):
        capmask = 1 << icap
        desc = '{0:#18x}'.format(capmask)

        # Colors:
        # * bold green of active caps,
        # * bold yellow for inherited caps,
        # * normal for disabled caps,
        # * grey for unsupported caps.
        # * red for unbounded caps
        if capmask & active_mask:
            esc_color = '1;32'
        elif capmask & inheritable_mask:
            esc_color = '1;33'
        elif icap > last_cap:
            esc_color = '37'
            desc = 'unsupported by the current kernel'
        elif (capmask & bounded_mask) == 0:
            esc_color = '31'
        else:
            esc_color = ''

        print(line_format.format(
            esc_color, name,
            ['+' if capmask & caps[sname] else '-' for sname in capsets],
            desc))


if __name__ == '__main__':
    main()
